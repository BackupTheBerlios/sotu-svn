// Generated by makeDynGL.pl
//
// Description: Wrappers for dynamically loaded GL functions
//
// Copyright (C) 2003 Frank Becker
//
// This program is free software; you can redistribute it and/or modify it under
// the terms of the GNU General Public License as published by the Free Software
// Foundation;  either version 2 of the License,  or (at your option) any  later
// version.
//
// This program is distributed in the hope that it will be useful,  but  WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details
//
#ifdef DYNAMIC_GL

#include "SDL.h"
#include "gl++.hpp"

#ifdef CONFIG_GL_NAMESPACE
namespace GL
{
#endif
	void (*DYN_glAccum) (GLenum op, GLfloat value);
	void (*DYN_glActiveStencilFaceEXT) (GLenum face);
	void (*DYN_glActiveTexture) (GLenum texture);
	void (*DYN_glActiveTextureARB) (GLenum texture);
	void (*DYN_glAddSwapHintRectWIN) (GLint x, GLint y, GLsizei width, GLsizei height);
	void (*DYN_glAlphaFunc) (GLenum func, GLclampf ref);
	GLboolean (*DYN_glAreProgramsResidentNV) (GLsizei n, const GLuint *programs, GLboolean *residences);
	GLboolean (*DYN_glAreTexturesResident) (GLsizei n, const GLuint *textures, GLboolean *residences);
	GLboolean (*DYN_glAreTexturesResidentEXT) (GLsizei n, const GLuint *textures, GLboolean *residences);
	void (*DYN_glArrayElement) (GLint i);
	void (*DYN_glArrayElementEXT) (GLint i);
	void (*DYN_glBegin) (GLenum mode);
	void (*DYN_glBeginOcclusionQueryNV) (GLuint id);
	void (*DYN_glBindBufferARB) (GLenum target, GLuint buffer);
	void (*DYN_glBindProgramARB) (GLenum target, GLuint program);
	void (*DYN_glBindProgramNV) (GLenum target, GLuint id);
	void (*DYN_glBindTexture) (GLenum target, GLuint texture);
	void (*DYN_glBindTextureEXT) (GLenum target, GLuint texture);
	void (*DYN_glBitmap) (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
	void (*DYN_glBlendColor) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void (*DYN_glBlendColorEXT) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void (*DYN_glBlendEquation) (GLenum mode);
	void (*DYN_glBlendEquationEXT) (GLenum mode);
	void (*DYN_glBlendFunc) (GLenum sfactor, GLenum dfactor);
	void (*DYN_glBlendFuncSeparate) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	void (*DYN_glBlendFuncSeparateEXT) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
	void (*DYN_glBufferDataARB) (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
	void (*DYN_glBufferSubDataARB) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
	void (*DYN_glCallList) (GLuint list);
	void (*DYN_glCallLists) (GLsizei n, GLenum type, const GLvoid *lists);
	void (*DYN_glClear) (GLbitfield mask);
	void (*DYN_glClearAccum) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void (*DYN_glClearColor) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
	void (*DYN_glClearDepth) (GLclampd depth);
	void (*DYN_glClearIndex) (GLfloat c);
	void (*DYN_glClearStencil) (GLint s);
	void (*DYN_glClientActiveTexture) (GLenum texture);
	void (*DYN_glClientActiveTextureARB) (GLenum texture);
	void (*DYN_glClipPlane) (GLenum plane, const GLdouble *equation);
	void (*DYN_glColor3b) (GLbyte red, GLbyte green, GLbyte blue);
	void (*DYN_glColor3bv) (const GLbyte *v);
	void (*DYN_glColor3d) (GLdouble red, GLdouble green, GLdouble blue);
	void (*DYN_glColor3dv) (const GLdouble *v);
	void (*DYN_glColor3f) (GLfloat red, GLfloat green, GLfloat blue);
	void (*DYN_glColor3fv) (const GLfloat *v);
	void (*DYN_glColor3hNV) (GLhalf red, GLhalf green, GLhalf blue);
	void (*DYN_glColor3hvNV) (const GLhalf *v);
	void (*DYN_glColor3i) (GLint red, GLint green, GLint blue);
	void (*DYN_glColor3iv) (const GLint *v);
	void (*DYN_glColor3s) (GLshort red, GLshort green, GLshort blue);
	void (*DYN_glColor3sv) (const GLshort *v);
	void (*DYN_glColor3ub) (GLubyte red, GLubyte green, GLubyte blue);
	void (*DYN_glColor3ubv) (const GLubyte *v);
	void (*DYN_glColor3ui) (GLuint red, GLuint green, GLuint blue);
	void (*DYN_glColor3uiv) (const GLuint *v);
	void (*DYN_glColor3us) (GLushort red, GLushort green, GLushort blue);
	void (*DYN_glColor3usv) (const GLushort *v);
	void (*DYN_glColor4b) (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
	void (*DYN_glColor4bv) (const GLbyte *v);
	void (*DYN_glColor4d) (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
	void (*DYN_glColor4dv) (const GLdouble *v);
	void (*DYN_glColor4f) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
	void (*DYN_glColor4fv) (const GLfloat *v);
	void (*DYN_glColor4hNV) (GLhalf red, GLhalf green, GLhalf blue, GLhalf alpha);
	void (*DYN_glColor4hvNV) (const GLhalf *v);
	void (*DYN_glColor4i) (GLint red, GLint green, GLint blue, GLint alpha);
	void (*DYN_glColor4iv) (const GLint *v);
	void (*DYN_glColor4s) (GLshort red, GLshort green, GLshort blue, GLshort alpha);
	void (*DYN_glColor4sv) (const GLshort *v);
	void (*DYN_glColor4ub) (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
	void (*DYN_glColor4ubv) (const GLubyte *v);
	void (*DYN_glColor4ui) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
	void (*DYN_glColor4uiv) (const GLuint *v);
	void (*DYN_glColor4us) (GLushort red, GLushort green, GLushort blue, GLushort alpha);
	void (*DYN_glColor4usv) (const GLushort *v);
	void (*DYN_glColorMask) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
	void (*DYN_glColorMaterial) (GLenum face, GLenum mode);
	void (*DYN_glColorPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glColorPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
	void (*DYN_glColorSubTable) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
	void (*DYN_glColorSubTableEXT) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table);
	void (*DYN_glColorTable) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
	void (*DYN_glColorTableEXT) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
	void (*DYN_glColorTableParameterfv) (GLenum target, GLenum pname, const GLfloat *params);
	void (*DYN_glColorTableParameteriv) (GLenum target, GLenum pname, const GLint *params);
	void (*DYN_glCombinerInputNV) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
	void (*DYN_glCombinerOutputNV) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
	void (*DYN_glCombinerParameterfNV) (GLenum pname, GLfloat param);
	void (*DYN_glCombinerParameterfvNV) (GLenum pname, const GLfloat *params);
	void (*DYN_glCombinerParameteriNV) (GLenum pname, GLint param);
	void (*DYN_glCombinerParameterivNV) (GLenum pname, const GLint *params);
	void (*DYN_glCombinerStageParameterfvNV) (GLenum stage, GLenum pname, const GLfloat *params);
	void (*DYN_glCompressedTexImage1D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glCompressedTexImage1DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glCompressedTexImage2D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glCompressedTexImage2DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glCompressedTexImage3D) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glCompressedTexImage3DARB) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glCompressedTexSubImage1D) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glCompressedTexSubImage1DARB) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glCompressedTexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glCompressedTexSubImage2DARB) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glCompressedTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glCompressedTexSubImage3DARB) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
	void (*DYN_glConvolutionFilter1D) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
	void (*DYN_glConvolutionFilter2D) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
	void (*DYN_glConvolutionParameterf) (GLenum target, GLenum pname, GLfloat params);
	void (*DYN_glConvolutionParameterfv) (GLenum target, GLenum pname, const GLfloat *params);
	void (*DYN_glConvolutionParameteri) (GLenum target, GLenum pname, GLint params);
	void (*DYN_glConvolutionParameteriv) (GLenum target, GLenum pname, const GLint *params);
	void (*DYN_glCopyColorSubTable) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
	void (*DYN_glCopyColorTable) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	void (*DYN_glCopyConvolutionFilter1D) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
	void (*DYN_glCopyConvolutionFilter2D) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*DYN_glCopyPixels) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
	void (*DYN_glCopyTexImage1D) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
	void (*DYN_glCopyTexImage2D) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
	void (*DYN_glCopyTexSubImage1D) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
	void (*DYN_glCopyTexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*DYN_glCopyTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*DYN_glCopyTexSubImage3DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*DYN_glCullFace) (GLenum mode);
	void (*DYN_glDeleteBuffersARB) (GLsizei n, const GLuint *buffers);
	void (*DYN_glDeleteFencesNV) (GLsizei n, const GLuint *fences);
	void (*DYN_glDeleteLists) (GLuint list, GLsizei range);
	void (*DYN_glDeleteOcclusionQueriesNV) (GLsizei n, const GLuint *ids);
	void (*DYN_glDeleteProgramsARB) (GLsizei n, const GLuint *programs);
	void (*DYN_glDeleteProgramsNV) (GLsizei n, const GLuint *programs);
	void (*DYN_glDeleteTextures) (GLsizei n, const GLuint *textures);
	void (*DYN_glDeleteTexturesEXT) (GLsizei n, const GLuint *textures);
	void (*DYN_glDepthBoundsEXT) (GLclampd zmin, GLclampd zmax);
	void (*DYN_glDepthFunc) (GLenum func);
	void (*DYN_glDepthMask) (GLboolean flag);
	void (*DYN_glDepthRange) (GLclampd zNear, GLclampd zFar);
	void (*DYN_glDisable) (GLenum cap);
	void (*DYN_glDisableClientState) (GLenum array);
	void (*DYN_glDisableVertexAttribArrayARB) (GLuint index);
	void (*DYN_glDrawArrays) (GLenum mode, GLint first, GLsizei count);
	void (*DYN_glDrawArraysEXT) (GLenum mode, GLint first, GLsizei count);
	void (*DYN_glDrawBuffer) (GLenum mode);
	void (*DYN_glDrawElements) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
	void (*DYN_glDrawMeshNV) (GLenum mode, GLsizei count, GLenum type, GLsizei stride, const GLvoid *indicesTexCoord, const GLvoid *indicesNormal, const GLvoid *indicesVertex);
	void (*DYN_glDrawPixels) (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
	void (*DYN_glDrawRangeElements) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
	void (*DYN_glDrawRangeElementsEXT) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
	void (*DYN_glEdgeFlag) (GLboolean flag);
	void (*DYN_glEdgeFlagPointer) (GLsizei stride, const GLboolean *pointer);
	void (*DYN_glEdgeFlagPointerEXT) (GLsizei stride, GLsizei count, const GLboolean *pointer);
	void (*DYN_glEdgeFlagv) (const GLboolean *flag);
	void (*DYN_glEnable) (GLenum cap);
	void (*DYN_glEnableClientState) (GLenum array);
	void (*DYN_glEnableVertexAttribArrayARB) (GLuint index);
	void (*DYN_glEnd) (void);
	void (*DYN_glEndList) (void);
	void (*DYN_glEndOcclusionQueryNV) (void);
	void (*DYN_glEvalCoord1d) (GLdouble u);
	void (*DYN_glEvalCoord1dv) (const GLdouble *u);
	void (*DYN_glEvalCoord1f) (GLfloat u);
	void (*DYN_glEvalCoord1fv) (const GLfloat *u);
	void (*DYN_glEvalCoord2d) (GLdouble u, GLdouble v);
	void (*DYN_glEvalCoord2dv) (const GLdouble *u);
	void (*DYN_glEvalCoord2f) (GLfloat u, GLfloat v);
	void (*DYN_glEvalCoord2fv) (const GLfloat *u);
	void (*DYN_glEvalMesh1) (GLenum mode, GLint i1, GLint i2);
	void (*DYN_glEvalMesh2) (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
	void (*DYN_glEvalPoint1) (GLint i);
	void (*DYN_glEvalPoint2) (GLint i, GLint j);
	void (*DYN_glExecuteProgramNV) (GLenum target, GLuint id, const GLfloat *params);
	void (*DYN_glFeedbackBuffer) (GLsizei size, GLenum type, GLfloat *buffer);
	void (*DYN_glFinalCombinerInputNV) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
	void (*DYN_glFinish) (void);
	void (*DYN_glFinishFenceNV) (GLuint fence);
	void (*DYN_glFlush) (void);
	GLuint (*DYN_glFlushHold) (void);
	void (*DYN_glFlushPixelDataRangeNV) (GLenum target);
	void (*DYN_glFlushVertexArrayRangeNV) (void);
	void (*DYN_glFogCoordPointer) (GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glFogCoordPointerEXT) (GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glFogCoordd) (GLdouble fog);
	void (*DYN_glFogCoorddEXT) (GLdouble fog);
	void (*DYN_glFogCoorddv) (const GLdouble *fog);
	void (*DYN_glFogCoorddvEXT) (const GLdouble *fog);
	void (*DYN_glFogCoordf) (GLfloat fog);
	void (*DYN_glFogCoordfEXT) (GLfloat fog);
	void (*DYN_glFogCoordfv) (const GLfloat *fog);
	void (*DYN_glFogCoordfvEXT) (const GLfloat *fog);
	void (*DYN_glFogCoordhNV) (GLhalf fog);
	void (*DYN_glFogCoordhvNV) (const GLhalf *fog);
	void (*DYN_glFogf) (GLenum pname, GLfloat param);
	void (*DYN_glFogfv) (GLenum pname, const GLfloat *params);
	void (*DYN_glFogi) (GLenum pname, GLint param);
	void (*DYN_glFogiv) (GLenum pname, const GLint *params);
	void (*DYN_glFrontFace) (GLenum mode);
	void (*DYN_glFrustum) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	void (*DYN_glGenBuffersARB) (GLsizei n, GLuint *buffers);
	void (*DYN_glGenFencesNV) (GLsizei n, GLuint *fences);
	GLuint (*DYN_glGenLists) (GLsizei range);
	void (*DYN_glGenOcclusionQueriesNV) (GLsizei n, GLuint *ids);
	void (*DYN_glGenProgramsARB) (GLsizei n, GLuint *programs);
	void (*DYN_glGenProgramsNV) (GLsizei n, GLuint *programs);
	void (*DYN_glGenTextures) (GLsizei n, GLuint *textures);
	void (*DYN_glGenTexturesEXT) (GLsizei n, GLuint *textures);
	void (*DYN_glGetBooleanv) (GLenum pname, GLboolean *params);
	void (*DYN_glGetBufferParameterivARB) (GLenum target, GLenum pname, GLint *params);
	void (*DYN_glGetBufferPointervARB) (GLenum target, GLenum pname, GLvoid* *params);
	void (*DYN_glGetBufferSubDataARB) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
	void (*DYN_glGetClipPlane) (GLenum plane, GLdouble *equation);
	void (*DYN_glGetColorTable) (GLenum target, GLenum format, GLenum type, GLvoid *table);
	void (*DYN_glGetColorTableEXT) (GLenum target, GLenum format, GLenum type, GLvoid *table);
	void (*DYN_glGetColorTableParameterfv) (GLenum target, GLenum pname, GLfloat *params);
	void (*DYN_glGetColorTableParameterfvEXT) (GLenum target, GLenum pname, GLfloat *params);
	void (*DYN_glGetColorTableParameteriv) (GLenum target, GLenum pname, GLint *params);
	void (*DYN_glGetColorTableParameterivEXT) (GLenum target, GLenum pname, GLint *params);
	void (*DYN_glGetCombinerInputParameterfvNV) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
	void (*DYN_glGetCombinerInputParameterivNV) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
	void (*DYN_glGetCombinerOutputParameterfvNV) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
	void (*DYN_glGetCombinerOutputParameterivNV) (GLenum stage, GLenum portion, GLenum pname, GLint *params);
	void (*DYN_glGetCombinerStageParameterfvNV) (GLenum stage, GLenum pname, GLfloat *params);
	void (*DYN_glGetCompressedTexImage) (GLenum target, GLint lod, GLvoid *img);
	void (*DYN_glGetCompressedTexImageARB) (GLenum target, GLint lod, GLvoid *img);
	void (*DYN_glGetConvolutionFilter) (GLenum target, GLenum format, GLenum type, GLvoid *image);
	void (*DYN_glGetConvolutionParameterfv) (GLenum target, GLenum pname, GLfloat *params);
	void (*DYN_glGetConvolutionParameteriv) (GLenum target, GLenum pname, GLint *params);
	void (*DYN_glGetDoublev) (GLenum pname, GLdouble *params);
	GLenum (*DYN_glGetError) (void);
	void (*DYN_glGetFenceivNV) (GLuint fence, GLenum pname, GLint *params);
	void (*DYN_glGetFinalCombinerInputParameterfvNV) (GLenum variable, GLenum pname, GLfloat *params);
	void (*DYN_glGetFinalCombinerInputParameterivNV) (GLenum variable, GLenum pname, GLint *params);
	void (*DYN_glGetFloatv) (GLenum pname, GLfloat *params);
	void (*DYN_glGetHistogram) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
	void (*DYN_glGetHistogramParameterfv) (GLenum target, GLenum pname, GLfloat *params);
	void (*DYN_glGetHistogramParameteriv) (GLenum target, GLenum pname, GLint *params);
	void (*DYN_glGetIntegerv) (GLenum pname, GLint *params);
	void (*DYN_glGetLightfv) (GLenum light, GLenum pname, GLfloat *params);
	void (*DYN_glGetLightiv) (GLenum light, GLenum pname, GLint *params);
	void (*DYN_glGetMapdv) (GLenum target, GLenum query, GLdouble *v);
	void (*DYN_glGetMapfv) (GLenum target, GLenum query, GLfloat *v);
	void (*DYN_glGetMapiv) (GLenum target, GLenum query, GLint *v);
	void (*DYN_glGetMaterialfv) (GLenum face, GLenum pname, GLfloat *params);
	void (*DYN_glGetMaterialiv) (GLenum face, GLenum pname, GLint *params);
	void (*DYN_glGetMinmax) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
	void (*DYN_glGetMinmaxParameterfv) (GLenum target, GLenum pname, GLfloat *params);
	void (*DYN_glGetMinmaxParameteriv) (GLenum target, GLenum pname, GLint *params);
	void (*DYN_glGetOcclusionQueryivNV) (GLuint id, GLenum pname, GLint *params);
	void (*DYN_glGetOcclusionQueryuivNV) (GLuint id, GLenum pname, GLuint *params);
	void (*DYN_glGetPixelMapfv) (GLenum map, GLfloat *values);
	void (*DYN_glGetPixelMapuiv) (GLenum map, GLuint *values);
	void (*DYN_glGetPixelMapusv) (GLenum map, GLushort *values);
	void (*DYN_glGetPointerv) (GLenum pname, GLvoid* *params);
	void (*DYN_glGetPointervEXT) (GLenum pname, GLvoid* *params);
	void (*DYN_glGetPolygonStipple) (GLubyte *mask);
	void (*DYN_glGetProgramEnvParameterdvARB) (GLenum target, GLuint index, GLdouble *params);
	void (*DYN_glGetProgramEnvParameterfvARB) (GLenum target, GLuint index, GLfloat *params);
	void (*DYN_glGetProgramLocalParameterdvARB) (GLenum target, GLuint index, GLdouble *params);
	void (*DYN_glGetProgramLocalParameterfvARB) (GLenum target, GLuint index, GLfloat *params);
	void (*DYN_glGetProgramNamedParameterdvNV) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
	void (*DYN_glGetProgramNamedParameterfvNV) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
	void (*DYN_glGetProgramParameterdvNV) (GLenum target, GLuint index, GLenum pname, GLdouble *params);
	void (*DYN_glGetProgramParameterfvNV) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
	void (*DYN_glGetProgramStringARB) (GLenum target, GLenum pname, GLvoid *string);
	void (*DYN_glGetProgramStringNV) (GLuint id, GLenum pname, GLubyte *program);
	void (*DYN_glGetProgramivARB) (GLenum target, GLenum pname, GLint *params);
	void (*DYN_glGetProgramivNV) (GLuint id, GLenum pname, GLint *params);
	void (*DYN_glGetSeparableFilter) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
	const GLubyte * (*DYN_glGetString) (GLenum name);
	void (*DYN_glGetTexEnvfv) (GLenum target, GLenum pname, GLfloat *params);
	void (*DYN_glGetTexEnviv) (GLenum target, GLenum pname, GLint *params);
	void (*DYN_glGetTexGendv) (GLenum coord, GLenum pname, GLdouble *params);
	void (*DYN_glGetTexGenfv) (GLenum coord, GLenum pname, GLfloat *params);
	void (*DYN_glGetTexGeniv) (GLenum coord, GLenum pname, GLint *params);
	void (*DYN_glGetTexImage) (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
	void (*DYN_glGetTexLevelParameterfv) (GLenum target, GLint level, GLenum pname, GLfloat *params);
	void (*DYN_glGetTexLevelParameteriv) (GLenum target, GLint level, GLenum pname, GLint *params);
	void (*DYN_glGetTexParameterfv) (GLenum target, GLenum pname, GLfloat *params);
	void (*DYN_glGetTexParameteriv) (GLenum target, GLenum pname, GLint *params);
	void (*DYN_glGetTrackMatrixivNV) (GLenum target, GLuint address, GLenum pname, GLint *params);
	void (*DYN_glGetVertexAttribPointervARB) (GLuint index, GLenum pname, GLvoid* *pointer);
	void (*DYN_glGetVertexAttribPointervNV) (GLuint index, GLenum pname, GLvoid* *pointer);
	void (*DYN_glGetVertexAttribdvARB) (GLuint index, GLenum pname, GLdouble *params);
	void (*DYN_glGetVertexAttribdvNV) (GLuint index, GLenum pname, GLdouble *params);
	void (*DYN_glGetVertexAttribfvARB) (GLuint index, GLenum pname, GLfloat *params);
	void (*DYN_glGetVertexAttribfvNV) (GLuint index, GLenum pname, GLfloat *params);
	void (*DYN_glGetVertexAttribivARB) (GLuint index, GLenum pname, GLint *params);
	void (*DYN_glGetVertexAttribivNV) (GLuint index, GLenum pname, GLint *params);
	void (*DYN_glHint) (GLenum target, GLenum mode);
	void (*DYN_glHistogram) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
	void (*DYN_glIndexMask) (GLuint mask);
	void (*DYN_glIndexPointer) (GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glIndexPointerEXT) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
	void (*DYN_glIndexd) (GLdouble c);
	void (*DYN_glIndexdv) (const GLdouble *c);
	void (*DYN_glIndexf) (GLfloat c);
	void (*DYN_glIndexfv) (const GLfloat *c);
	void (*DYN_glIndexi) (GLint c);
	void (*DYN_glIndexiv) (const GLint *c);
	void (*DYN_glIndexs) (GLshort c);
	void (*DYN_glIndexsv) (const GLshort *c);
	void (*DYN_glIndexub) (GLubyte c);
	void (*DYN_glIndexubv) (const GLubyte *c);
	void (*DYN_glInitNames) (void);
	void (*DYN_glInterleavedArrays) (GLenum format, GLsizei stride, const GLvoid *pointer);
	GLboolean (*DYN_glIsBufferARB) (GLuint buffer);
	GLboolean (*DYN_glIsEnabled) (GLenum cap);
	GLboolean (*DYN_glIsFenceNV) (GLuint fence);
	GLboolean (*DYN_glIsList) (GLuint list);
	GLboolean (*DYN_glIsOcclusionQueryNV) (GLuint id);
	GLboolean (*DYN_glIsProgramARB) (GLuint program);
	GLboolean (*DYN_glIsProgramNV) (GLuint id);
	GLboolean (*DYN_glIsTexture) (GLuint texture);
	GLboolean (*DYN_glIsTextureEXT) (GLuint texture);
	void (*DYN_glLightModelf) (GLenum pname, GLfloat param);
	void (*DYN_glLightModelfv) (GLenum pname, const GLfloat *params);
	void (*DYN_glLightModeli) (GLenum pname, GLint param);
	void (*DYN_glLightModeliv) (GLenum pname, const GLint *params);
	void (*DYN_glLightf) (GLenum light, GLenum pname, GLfloat param);
	void (*DYN_glLightfv) (GLenum light, GLenum pname, const GLfloat *params);
	void (*DYN_glLighti) (GLenum light, GLenum pname, GLint param);
	void (*DYN_glLightiv) (GLenum light, GLenum pname, const GLint *params);
	void (*DYN_glLineStipple) (GLint factor, GLushort pattern);
	void (*DYN_glLineWidth) (GLfloat width);
	void (*DYN_glListBase) (GLuint base);
	void (*DYN_glLoadIdentity) (void);
	void (*DYN_glLoadMatrixd) (const GLdouble *m);
	void (*DYN_glLoadMatrixf) (const GLfloat *m);
	void (*DYN_glLoadName) (GLuint name);
	void (*DYN_glLoadProgramNV) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
	void (*DYN_glLoadTransposeMatrixd) (const GLdouble *m);
	void (*DYN_glLoadTransposeMatrixdARB) (const GLdouble *m);
	void (*DYN_glLoadTransposeMatrixf) (const GLfloat *m);
	void (*DYN_glLoadTransposeMatrixfARB) (const GLfloat *m);
	void (*DYN_glLockArraysEXT) (GLint first, GLsizei count);
	void (*DYN_glLogicOp) (GLenum opcode);
	void (*DYN_glMap1d) (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
	void (*DYN_glMap1f) (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
	void (*DYN_glMap2d) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
	void (*DYN_glMap2f) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
	GLvoid* (*DYN_glMapBufferARB) (GLenum target, GLenum access);
	void (*DYN_glMapGrid1d) (GLint un, GLdouble u1, GLdouble u2);
	void (*DYN_glMapGrid1f) (GLint un, GLfloat u1, GLfloat u2);
	void (*DYN_glMapGrid2d) (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
	void (*DYN_glMapGrid2f) (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
	void (*DYN_glMaterialf) (GLenum face, GLenum pname, GLfloat param);
	void (*DYN_glMaterialfv) (GLenum face, GLenum pname, const GLfloat *params);
	void (*DYN_glMateriali) (GLenum face, GLenum pname, GLint param);
	void (*DYN_glMaterialiv) (GLenum face, GLenum pname, const GLint *params);
	void (*DYN_glMatrixMode) (GLenum mode);
	void (*DYN_glMinmax) (GLenum target, GLenum internalformat, GLboolean sink);
	void (*DYN_glMultMatrixd) (const GLdouble *m);
	void (*DYN_glMultMatrixf) (const GLfloat *m);
	void (*DYN_glMultTransposeMatrixd) (const GLdouble *m);
	void (*DYN_glMultTransposeMatrixdARB) (const GLdouble *m);
	void (*DYN_glMultTransposeMatrixf) (const GLfloat *m);
	void (*DYN_glMultTransposeMatrixfARB) (const GLfloat *m);
	void (*DYN_glMultiDrawArrays) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
	void (*DYN_glMultiDrawArraysEXT) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
	void (*DYN_glMultiDrawElements) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
	void (*DYN_glMultiDrawElementsEXT) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
	void (*DYN_glMultiTexCoord1d) (GLenum target, GLdouble s);
	void (*DYN_glMultiTexCoord1dARB) (GLenum target, GLdouble s);
	void (*DYN_glMultiTexCoord1dSGIS) (GLenum target, GLdouble s);
	void (*DYN_glMultiTexCoord1dv) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord1dvARB) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord1dvSGIS) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord1f) (GLenum target, GLfloat s);
	void (*DYN_glMultiTexCoord1fARB) (GLenum target, GLfloat s);
	void (*DYN_glMultiTexCoord1fSGIS) (GLenum target, GLfloat s);
	void (*DYN_glMultiTexCoord1fv) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord1fvARB) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord1fvSGIS) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord1hNV) (GLenum target, GLhalf s);
	void (*DYN_glMultiTexCoord1hvNV) (GLenum target, const GLhalf *v);
	void (*DYN_glMultiTexCoord1i) (GLenum target, GLint s);
	void (*DYN_glMultiTexCoord1iARB) (GLenum target, GLint s);
	void (*DYN_glMultiTexCoord1iSGIS) (GLenum target, GLint s);
	void (*DYN_glMultiTexCoord1iv) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord1ivARB) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord1ivSGIS) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord1s) (GLenum target, GLshort s);
	void (*DYN_glMultiTexCoord1sARB) (GLenum target, GLshort s);
	void (*DYN_glMultiTexCoord1sSGIS) (GLenum target, GLshort s);
	void (*DYN_glMultiTexCoord1sv) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoord1svARB) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoord1svSGIS) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoord2d) (GLenum target, GLdouble s, GLdouble t);
	void (*DYN_glMultiTexCoord2dARB) (GLenum target, GLdouble s, GLdouble t);
	void (*DYN_glMultiTexCoord2dSGIS) (GLenum target, GLdouble s, GLdouble t);
	void (*DYN_glMultiTexCoord2dv) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord2dvARB) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord2dvSGIS) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord2f) (GLenum target, GLfloat s, GLfloat t);
	void (*DYN_glMultiTexCoord2fARB) (GLenum target, GLfloat s, GLfloat t);
	void (*DYN_glMultiTexCoord2fSGIS) (GLenum target, GLfloat s, GLfloat t);
	void (*DYN_glMultiTexCoord2fv) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord2fvARB) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord2fvSGIS) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord2hNV) (GLenum target, GLhalf s, GLhalf t);
	void (*DYN_glMultiTexCoord2hvNV) (GLenum target, const GLhalf *v);
	void (*DYN_glMultiTexCoord2i) (GLenum target, GLint s, GLint t);
	void (*DYN_glMultiTexCoord2iARB) (GLenum target, GLint s, GLint t);
	void (*DYN_glMultiTexCoord2iSGIS) (GLenum target, GLint s, GLint t);
	void (*DYN_glMultiTexCoord2iv) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord2ivARB) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord2ivSGIS) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord2s) (GLenum target, GLshort s, GLshort t);
	void (*DYN_glMultiTexCoord2sARB) (GLenum target, GLshort s, GLshort t);
	void (*DYN_glMultiTexCoord2sSGIS) (GLenum target, GLshort s, GLshort t);
	void (*DYN_glMultiTexCoord2sv) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoord2svARB) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoord2svSGIS) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoord3d) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
	void (*DYN_glMultiTexCoord3dARB) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
	void (*DYN_glMultiTexCoord3dSGIS) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
	void (*DYN_glMultiTexCoord3dv) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord3dvARB) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord3dvSGIS) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord3f) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
	void (*DYN_glMultiTexCoord3fARB) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
	void (*DYN_glMultiTexCoord3fSGIS) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
	void (*DYN_glMultiTexCoord3fv) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord3fvARB) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord3fvSGIS) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord3hNV) (GLenum target, GLhalf s, GLhalf t, GLhalf r);
	void (*DYN_glMultiTexCoord3hvNV) (GLenum target, const GLhalf *v);
	void (*DYN_glMultiTexCoord3i) (GLenum target, GLint s, GLint t, GLint r);
	void (*DYN_glMultiTexCoord3iARB) (GLenum target, GLint s, GLint t, GLint r);
	void (*DYN_glMultiTexCoord3iSGIS) (GLenum target, GLint s, GLint t, GLint r);
	void (*DYN_glMultiTexCoord3iv) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord3ivARB) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord3ivSGIS) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord3s) (GLenum target, GLshort s, GLshort t, GLshort r);
	void (*DYN_glMultiTexCoord3sARB) (GLenum target, GLshort s, GLshort t, GLshort r);
	void (*DYN_glMultiTexCoord3sSGIS) (GLenum target, GLshort s, GLshort t, GLshort r);
	void (*DYN_glMultiTexCoord3sv) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoord3svARB) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoord3svSGIS) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoord4d) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (*DYN_glMultiTexCoord4dARB) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (*DYN_glMultiTexCoord4dSGIS) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (*DYN_glMultiTexCoord4dv) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord4dvARB) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord4dvSGIS) (GLenum target, const GLdouble *v);
	void (*DYN_glMultiTexCoord4f) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (*DYN_glMultiTexCoord4fARB) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (*DYN_glMultiTexCoord4fSGIS) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (*DYN_glMultiTexCoord4fv) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord4fvARB) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord4fvSGIS) (GLenum target, const GLfloat *v);
	void (*DYN_glMultiTexCoord4hNV) (GLenum target, GLhalf s, GLhalf t, GLhalf r, GLhalf q);
	void (*DYN_glMultiTexCoord4hvNV) (GLenum target, const GLhalf *v);
	void (*DYN_glMultiTexCoord4i) (GLenum target, GLint s, GLint t, GLint r, GLint q);
	void (*DYN_glMultiTexCoord4iARB) (GLenum target, GLint s, GLint t, GLint r, GLint q);
	void (*DYN_glMultiTexCoord4iSGIS) (GLenum target, GLint s, GLint t, GLint r, GLint q);
	void (*DYN_glMultiTexCoord4iv) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord4ivARB) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord4ivSGIS) (GLenum target, const GLint *v);
	void (*DYN_glMultiTexCoord4s) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	void (*DYN_glMultiTexCoord4sARB) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	void (*DYN_glMultiTexCoord4sSGIS) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	void (*DYN_glMultiTexCoord4sv) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoord4svARB) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoord4svSGIS) (GLenum target, const GLshort *v);
	void (*DYN_glMultiTexCoordPointerSGIS) (GLenum target, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glNewList) (GLuint list, GLenum mode);
	void (*DYN_glNormal3b) (GLbyte nx, GLbyte ny, GLbyte nz);
	void (*DYN_glNormal3bv) (const GLbyte *v);
	void (*DYN_glNormal3d) (GLdouble nx, GLdouble ny, GLdouble nz);
	void (*DYN_glNormal3dv) (const GLdouble *v);
	void (*DYN_glNormal3f) (GLfloat nx, GLfloat ny, GLfloat nz);
	void (*DYN_glNormal3fv) (const GLfloat *v);
	void (*DYN_glNormal3hNV) (GLhalf nx, GLhalf ny, GLhalf nz);
	void (*DYN_glNormal3hvNV) (const GLhalf *v);
	void (*DYN_glNormal3i) (GLint nx, GLint ny, GLint nz);
	void (*DYN_glNormal3iv) (const GLint *v);
	void (*DYN_glNormal3s) (GLshort nx, GLshort ny, GLshort nz);
	void (*DYN_glNormal3sv) (const GLshort *v);
	void (*DYN_glNormalPointer) (GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glNormalPointerEXT) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
	void (*DYN_glOrtho) (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
	void (*DYN_glPassThrough) (GLfloat token);
	void (*DYN_glPixelDataRangeNV) (GLenum target, GLsizei size, const GLvoid *pointer);
	void (*DYN_glPixelMapfv) (GLenum map, GLint mapsize, const GLfloat *values);
	void (*DYN_glPixelMapuiv) (GLenum map, GLint mapsize, const GLuint *values);
	void (*DYN_glPixelMapusv) (GLenum map, GLint mapsize, const GLushort *values);
	void (*DYN_glPixelStoref) (GLenum pname, GLfloat param);
	void (*DYN_glPixelStorei) (GLenum pname, GLint param);
	void (*DYN_glPixelTransferf) (GLenum pname, GLfloat param);
	void (*DYN_glPixelTransferi) (GLenum pname, GLint param);
	void (*DYN_glPixelZoom) (GLfloat xfactor, GLfloat yfactor);
	void (*DYN_glPointParameterf) (GLenum pname, GLfloat param);
	void (*DYN_glPointParameterfARB) (GLenum pname, GLfloat param);
	void (*DYN_glPointParameterfEXT) (GLenum pname, GLfloat param);
	void (*DYN_glPointParameterfv) (GLenum pname, const GLfloat *params);
	void (*DYN_glPointParameterfvARB) (GLenum pname, const GLfloat *params);
	void (*DYN_glPointParameterfvEXT) (GLenum pname, const GLfloat *params);
	void (*DYN_glPointParameteri) (GLenum pname, GLint param);
	void (*DYN_glPointParameteriNV) (GLenum pname, GLint param);
	void (*DYN_glPointParameteriv) (GLenum pname, const GLint *params);
	void (*DYN_glPointParameterivNV) (GLenum pname, const GLint *params);
	void (*DYN_glPointSize) (GLfloat size);
	void (*DYN_glPolygonMode) (GLenum face, GLenum mode);
	void (*DYN_glPolygonOffset) (GLfloat factor, GLfloat units);
	void (*DYN_glPolygonStipple) (const GLubyte *mask);
	void (*DYN_glPopAttrib) (void);
	void (*DYN_glPopClientAttrib) (void);
	void (*DYN_glPopMatrix) (void);
	void (*DYN_glPopName) (void);
	void (*DYN_glPrimitiveRestartIndexNV) (GLuint index);
	void (*DYN_glPrimitiveRestartNV) (void);
	void (*DYN_glPrioritizeTextures) (GLsizei n, const GLuint *textures, const GLclampf *priorities);
	void (*DYN_glPrioritizeTexturesEXT) (GLsizei n, const GLuint *textures, const GLclampf *priorities);
	void (*DYN_glProgramEnvParameter4dARB) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*DYN_glProgramEnvParameter4dvARB) (GLenum target, GLuint index, const GLdouble *params);
	void (*DYN_glProgramEnvParameter4fARB) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*DYN_glProgramEnvParameter4fvARB) (GLenum target, GLuint index, const GLfloat *params);
	void (*DYN_glProgramLocalParameter4dARB) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*DYN_glProgramLocalParameter4dvARB) (GLenum target, GLuint index, const GLdouble *params);
	void (*DYN_glProgramLocalParameter4fARB) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*DYN_glProgramLocalParameter4fvARB) (GLenum target, GLuint index, const GLfloat *params);
	void (*DYN_glProgramNamedParameter4dNV) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*DYN_glProgramNamedParameter4dvNV) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
	void (*DYN_glProgramNamedParameter4fNV) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*DYN_glProgramNamedParameter4fvNV) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
	void (*DYN_glProgramParameter4dNV) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*DYN_glProgramParameter4dvNV) (GLenum target, GLuint index, const GLdouble *v);
	void (*DYN_glProgramParameter4fNV) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*DYN_glProgramParameter4fvNV) (GLenum target, GLuint index, const GLfloat *v);
	void (*DYN_glProgramParameters4dvNV) (GLenum target, GLuint index, GLsizei count, const GLdouble *v);
	void (*DYN_glProgramParameters4fvNV) (GLenum target, GLuint index, GLsizei count, const GLfloat *v);
	void (*DYN_glProgramStringARB) (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
	void (*DYN_glPushAttrib) (GLbitfield mask);
	void (*DYN_glPushClientAttrib) (GLbitfield mask);
	void (*DYN_glPushMatrix) (void);
	void (*DYN_glPushName) (GLuint name);
	void (*DYN_glRasterPos2d) (GLdouble x, GLdouble y);
	void (*DYN_glRasterPos2dv) (const GLdouble *v);
	void (*DYN_glRasterPos2f) (GLfloat x, GLfloat y);
	void (*DYN_glRasterPos2fv) (const GLfloat *v);
	void (*DYN_glRasterPos2i) (GLint x, GLint y);
	void (*DYN_glRasterPos2iv) (const GLint *v);
	void (*DYN_glRasterPos2s) (GLshort x, GLshort y);
	void (*DYN_glRasterPos2sv) (const GLshort *v);
	void (*DYN_glRasterPos3d) (GLdouble x, GLdouble y, GLdouble z);
	void (*DYN_glRasterPos3dv) (const GLdouble *v);
	void (*DYN_glRasterPos3f) (GLfloat x, GLfloat y, GLfloat z);
	void (*DYN_glRasterPos3fv) (const GLfloat *v);
	void (*DYN_glRasterPos3i) (GLint x, GLint y, GLint z);
	void (*DYN_glRasterPos3iv) (const GLint *v);
	void (*DYN_glRasterPos3s) (GLshort x, GLshort y, GLshort z);
	void (*DYN_glRasterPos3sv) (const GLshort *v);
	void (*DYN_glRasterPos4d) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*DYN_glRasterPos4dv) (const GLdouble *v);
	void (*DYN_glRasterPos4f) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*DYN_glRasterPos4fv) (const GLfloat *v);
	void (*DYN_glRasterPos4i) (GLint x, GLint y, GLint z, GLint w);
	void (*DYN_glRasterPos4iv) (const GLint *v);
	void (*DYN_glRasterPos4s) (GLshort x, GLshort y, GLshort z, GLshort w);
	void (*DYN_glRasterPos4sv) (const GLshort *v);
	void (*DYN_glReadBuffer) (GLenum mode);
	void (*DYN_glReadPixels) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
	void (*DYN_glRectd) (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
	void (*DYN_glRectdv) (const GLdouble *v1, const GLdouble *v2);
	void (*DYN_glRectf) (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
	void (*DYN_glRectfv) (const GLfloat *v1, const GLfloat *v2);
	void (*DYN_glRecti) (GLint x1, GLint y1, GLint x2, GLint y2);
	void (*DYN_glRectiv) (const GLint *v1, const GLint *v2);
	void (*DYN_glRects) (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
	void (*DYN_glRectsv) (const GLshort *v1, const GLshort *v2);
	GLenum (*DYN_glReleaseFlushHold) (GLuint id);
	GLint (*DYN_glRenderMode) (GLenum mode);
	void (*DYN_glRequestResidentProgramsNV) (GLsizei n, const GLuint *programs);
	void (*DYN_glResetHistogram) (GLenum target);
	void (*DYN_glResetMinmax) (GLenum target);
	void (*DYN_glRotated) (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
	void (*DYN_glRotatef) (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
	void (*DYN_glSampleCoverage) (GLclampf value, GLboolean invert);
	void (*DYN_glSampleCoverageARB) (GLclampf value, GLboolean invert);
	void (*DYN_glScaled) (GLdouble x, GLdouble y, GLdouble z);
	void (*DYN_glScalef) (GLfloat x, GLfloat y, GLfloat z);
	void (*DYN_glScissor) (GLint x, GLint y, GLsizei width, GLsizei height);
	void (*DYN_glSecondaryColor3b) (GLbyte red, GLbyte green, GLbyte blue);
	void (*DYN_glSecondaryColor3bEXT) (GLbyte red, GLbyte green, GLbyte blue);
	void (*DYN_glSecondaryColor3bv) (const GLbyte *v);
	void (*DYN_glSecondaryColor3bvEXT) (const GLbyte *v);
	void (*DYN_glSecondaryColor3d) (GLdouble red, GLdouble green, GLdouble blue);
	void (*DYN_glSecondaryColor3dEXT) (GLdouble red, GLdouble green, GLdouble blue);
	void (*DYN_glSecondaryColor3dv) (const GLdouble *v);
	void (*DYN_glSecondaryColor3dvEXT) (const GLdouble *v);
	void (*DYN_glSecondaryColor3f) (GLfloat red, GLfloat green, GLfloat blue);
	void (*DYN_glSecondaryColor3fEXT) (GLfloat red, GLfloat green, GLfloat blue);
	void (*DYN_glSecondaryColor3fv) (const GLfloat *v);
	void (*DYN_glSecondaryColor3fvEXT) (const GLfloat *v);
	void (*DYN_glSecondaryColor3hNV) (GLhalf red, GLhalf green, GLhalf blue);
	void (*DYN_glSecondaryColor3hvNV) (const GLhalf *v);
	void (*DYN_glSecondaryColor3i) (GLint red, GLint green, GLint blue);
	void (*DYN_glSecondaryColor3iEXT) (GLint red, GLint green, GLint blue);
	void (*DYN_glSecondaryColor3iv) (const GLint *v);
	void (*DYN_glSecondaryColor3ivEXT) (const GLint *v);
	void (*DYN_glSecondaryColor3s) (GLshort red, GLshort green, GLshort blue);
	void (*DYN_glSecondaryColor3sEXT) (GLshort red, GLshort green, GLshort blue);
	void (*DYN_glSecondaryColor3sv) (const GLshort *v);
	void (*DYN_glSecondaryColor3svEXT) (const GLshort *v);
	void (*DYN_glSecondaryColor3ub) (GLubyte red, GLubyte green, GLubyte blue);
	void (*DYN_glSecondaryColor3ubEXT) (GLubyte red, GLubyte green, GLubyte blue);
	void (*DYN_glSecondaryColor3ubv) (const GLubyte *v);
	void (*DYN_glSecondaryColor3ubvEXT) (const GLubyte *v);
	void (*DYN_glSecondaryColor3ui) (GLuint red, GLuint green, GLuint blue);
	void (*DYN_glSecondaryColor3uiEXT) (GLuint red, GLuint green, GLuint blue);
	void (*DYN_glSecondaryColor3uiv) (const GLuint *v);
	void (*DYN_glSecondaryColor3uivEXT) (const GLuint *v);
	void (*DYN_glSecondaryColor3us) (GLushort red, GLushort green, GLushort blue);
	void (*DYN_glSecondaryColor3usEXT) (GLushort red, GLushort green, GLushort blue);
	void (*DYN_glSecondaryColor3usv) (const GLushort *v);
	void (*DYN_glSecondaryColor3usvEXT) (const GLushort *v);
	void (*DYN_glSecondaryColorPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glSecondaryColorPointerEXT) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glSelectBuffer) (GLsizei size, GLuint *buffer);
	void (*DYN_glSelectTextureCoordSetSGIS) (GLenum target);
	void (*DYN_glSelectTextureSGIS) (GLenum target);
	void (*DYN_glSeparableFilter2D) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
	void (*DYN_glSetFenceNV) (GLuint fence, GLenum condition);
	void (*DYN_glSetWindowStereoModeNV) (GLboolean displayMode);
	void (*DYN_glShadeModel) (GLenum mode);
	void (*DYN_glStencilFunc) (GLenum func, GLint ref, GLuint mask);
	void (*DYN_glStencilMask) (GLuint mask);
	void (*DYN_glStencilOp) (GLenum fail, GLenum zfail, GLenum zpass);
	void (*DYN_glTbufferMask3DFX) (GLuint mask);
	GLboolean (*DYN_glTestFenceNV) (GLuint fence);
	void (*DYN_glTexCoord1d) (GLdouble s);
	void (*DYN_glTexCoord1dv) (const GLdouble *v);
	void (*DYN_glTexCoord1f) (GLfloat s);
	void (*DYN_glTexCoord1fv) (const GLfloat *v);
	void (*DYN_glTexCoord1hNV) (GLhalf s);
	void (*DYN_glTexCoord1hvNV) (const GLhalf *v);
	void (*DYN_glTexCoord1i) (GLint s);
	void (*DYN_glTexCoord1iv) (const GLint *v);
	void (*DYN_glTexCoord1s) (GLshort s);
	void (*DYN_glTexCoord1sv) (const GLshort *v);
	void (*DYN_glTexCoord2d) (GLdouble s, GLdouble t);
	void (*DYN_glTexCoord2dv) (const GLdouble *v);
	void (*DYN_glTexCoord2f) (GLfloat s, GLfloat t);
	void (*DYN_glTexCoord2fv) (const GLfloat *v);
	void (*DYN_glTexCoord2hNV) (GLhalf s, GLhalf t);
	void (*DYN_glTexCoord2hvNV) (const GLhalf *v);
	void (*DYN_glTexCoord2i) (GLint s, GLint t);
	void (*DYN_glTexCoord2iv) (const GLint *v);
	void (*DYN_glTexCoord2s) (GLshort s, GLshort t);
	void (*DYN_glTexCoord2sv) (const GLshort *v);
	void (*DYN_glTexCoord3d) (GLdouble s, GLdouble t, GLdouble r);
	void (*DYN_glTexCoord3dv) (const GLdouble *v);
	void (*DYN_glTexCoord3f) (GLfloat s, GLfloat t, GLfloat r);
	void (*DYN_glTexCoord3fv) (const GLfloat *v);
	void (*DYN_glTexCoord3hNV) (GLhalf s, GLhalf t, GLhalf r);
	void (*DYN_glTexCoord3hvNV) (const GLhalf *v);
	void (*DYN_glTexCoord3i) (GLint s, GLint t, GLint r);
	void (*DYN_glTexCoord3iv) (const GLint *v);
	void (*DYN_glTexCoord3s) (GLshort s, GLshort t, GLshort r);
	void (*DYN_glTexCoord3sv) (const GLshort *v);
	void (*DYN_glTexCoord4d) (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (*DYN_glTexCoord4dv) (const GLdouble *v);
	void (*DYN_glTexCoord4f) (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (*DYN_glTexCoord4fv) (const GLfloat *v);
	void (*DYN_glTexCoord4hNV) (GLhalf s, GLhalf t, GLhalf r, GLhalf q);
	void (*DYN_glTexCoord4hvNV) (const GLhalf *v);
	void (*DYN_glTexCoord4i) (GLint s, GLint t, GLint r, GLint q);
	void (*DYN_glTexCoord4iv) (const GLint *v);
	void (*DYN_glTexCoord4s) (GLshort s, GLshort t, GLshort r, GLshort q);
	void (*DYN_glTexCoord4sv) (const GLshort *v);
	void (*DYN_glTexCoordPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glTexCoordPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
	void (*DYN_glTexEnvf) (GLenum target, GLenum pname, GLfloat param);
	void (*DYN_glTexEnvfv) (GLenum target, GLenum pname, const GLfloat *params);
	void (*DYN_glTexEnvi) (GLenum target, GLenum pname, GLint param);
	void (*DYN_glTexEnviv) (GLenum target, GLenum pname, const GLint *params);
	void (*DYN_glTexGend) (GLenum coord, GLenum pname, GLdouble param);
	void (*DYN_glTexGendv) (GLenum coord, GLenum pname, const GLdouble *params);
	void (*DYN_glTexGenf) (GLenum coord, GLenum pname, GLfloat param);
	void (*DYN_glTexGenfv) (GLenum coord, GLenum pname, const GLfloat *params);
	void (*DYN_glTexGeni) (GLenum coord, GLenum pname, GLint param);
	void (*DYN_glTexGeniv) (GLenum coord, GLenum pname, const GLint *params);
	void (*DYN_glTexImage1D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
	void (*DYN_glTexImage2D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
	void (*DYN_glTexImage3D) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
	void (*DYN_glTexImage3DEXT) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
	void (*DYN_glTexParameterf) (GLenum target, GLenum pname, GLfloat param);
	void (*DYN_glTexParameterfv) (GLenum target, GLenum pname, const GLfloat *params);
	void (*DYN_glTexParameteri) (GLenum target, GLenum pname, GLint param);
	void (*DYN_glTexParameteriv) (GLenum target, GLenum pname, const GLint *params);
	void (*DYN_glTexSubImage1D) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
	void (*DYN_glTexSubImage2D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
	void (*DYN_glTexSubImage3D) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
	void (*DYN_glTexSubImage3DEXT) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
	void (*DYN_glTextureColorMaskSGIS) (GLboolean r, GLboolean g, GLboolean b, GLboolean a);
	void (*DYN_glTrackMatrixNV) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
	void (*DYN_glTranslated) (GLdouble x, GLdouble y, GLdouble z);
	void (*DYN_glTranslatef) (GLfloat x, GLfloat y, GLfloat z);
	void (*DYN_glUnlockArraysEXT) (void);
	GLboolean (*DYN_glUnmapBufferARB) (GLenum target);
	GLboolean (*DYN_glValidBackBufferHintAutodesk) (GLint x, GLint y, GLsizei width, GLsizei height);
	void (*DYN_glVertex2d) (GLdouble x, GLdouble y);
	void (*DYN_glVertex2dv) (const GLdouble *v);
	void (*DYN_glVertex2f) (GLfloat x, GLfloat y);
	void (*DYN_glVertex2fv) (const GLfloat *v);
	void (*DYN_glVertex2hNV) (GLhalf x, GLhalf y);
	void (*DYN_glVertex2hvNV) (const GLhalf *v);
	void (*DYN_glVertex2i) (GLint x, GLint y);
	void (*DYN_glVertex2iv) (const GLint *v);
	void (*DYN_glVertex2s) (GLshort x, GLshort y);
	void (*DYN_glVertex2sv) (const GLshort *v);
	void (*DYN_glVertex3d) (GLdouble x, GLdouble y, GLdouble z);
	void (*DYN_glVertex3dv) (const GLdouble *v);
	void (*DYN_glVertex3f) (GLfloat x, GLfloat y, GLfloat z);
	void (*DYN_glVertex3fv) (const GLfloat *v);
	void (*DYN_glVertex3hNV) (GLhalf x, GLhalf y, GLhalf z);
	void (*DYN_glVertex3hvNV) (const GLhalf *v);
	void (*DYN_glVertex3i) (GLint x, GLint y, GLint z);
	void (*DYN_glVertex3iv) (const GLint *v);
	void (*DYN_glVertex3s) (GLshort x, GLshort y, GLshort z);
	void (*DYN_glVertex3sv) (const GLshort *v);
	void (*DYN_glVertex4d) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*DYN_glVertex4dv) (const GLdouble *v);
	void (*DYN_glVertex4f) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*DYN_glVertex4fv) (const GLfloat *v);
	void (*DYN_glVertex4hNV) (GLhalf x, GLhalf y, GLhalf z, GLhalf w);
	void (*DYN_glVertex4hvNV) (const GLhalf *v);
	void (*DYN_glVertex4i) (GLint x, GLint y, GLint z, GLint w);
	void (*DYN_glVertex4iv) (const GLint *v);
	void (*DYN_glVertex4s) (GLshort x, GLshort y, GLshort z, GLshort w);
	void (*DYN_glVertex4sv) (const GLshort *v);
	void (*DYN_glVertexArrayRangeNV) (GLsizei size, const GLvoid *pointer);
	void (*DYN_glVertexAttrib1dARB) (GLuint index, GLdouble x);
	void (*DYN_glVertexAttrib1dNV) (GLuint index, GLdouble x);
	void (*DYN_glVertexAttrib1dvARB) (GLuint index, const GLdouble *v);
	void (*DYN_glVertexAttrib1dvNV) (GLuint index, const GLdouble *v);
	void (*DYN_glVertexAttrib1fARB) (GLuint index, GLfloat x);
	void (*DYN_glVertexAttrib1fNV) (GLuint index, GLfloat x);
	void (*DYN_glVertexAttrib1fvARB) (GLuint index, const GLfloat *v);
	void (*DYN_glVertexAttrib1fvNV) (GLuint index, const GLfloat *v);
	void (*DYN_glVertexAttrib1hNV) (GLuint index, GLhalf x);
	void (*DYN_glVertexAttrib1hvNV) (GLuint index, const GLhalf *v);
	void (*DYN_glVertexAttrib1sARB) (GLuint index, GLshort x);
	void (*DYN_glVertexAttrib1sNV) (GLuint index, GLshort x);
	void (*DYN_glVertexAttrib1svARB) (GLuint index, const GLshort *v);
	void (*DYN_glVertexAttrib1svNV) (GLuint index, const GLshort *v);
	void (*DYN_glVertexAttrib2dARB) (GLuint index, GLdouble x, GLdouble y);
	void (*DYN_glVertexAttrib2dNV) (GLuint index, GLdouble x, GLdouble y);
	void (*DYN_glVertexAttrib2dvARB) (GLuint index, const GLdouble *v);
	void (*DYN_glVertexAttrib2dvNV) (GLuint index, const GLdouble *v);
	void (*DYN_glVertexAttrib2fARB) (GLuint index, GLfloat x, GLfloat y);
	void (*DYN_glVertexAttrib2fNV) (GLuint index, GLfloat x, GLfloat y);
	void (*DYN_glVertexAttrib2fvARB) (GLuint index, const GLfloat *v);
	void (*DYN_glVertexAttrib2fvNV) (GLuint index, const GLfloat *v);
	void (*DYN_glVertexAttrib2hNV) (GLuint index, GLhalf x, GLhalf y);
	void (*DYN_glVertexAttrib2hvNV) (GLuint index, const GLhalf *v);
	void (*DYN_glVertexAttrib2sARB) (GLuint index, GLshort x, GLshort y);
	void (*DYN_glVertexAttrib2sNV) (GLuint index, GLshort x, GLshort y);
	void (*DYN_glVertexAttrib2svARB) (GLuint index, const GLshort *v);
	void (*DYN_glVertexAttrib2svNV) (GLuint index, const GLshort *v);
	void (*DYN_glVertexAttrib3dARB) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
	void (*DYN_glVertexAttrib3dNV) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
	void (*DYN_glVertexAttrib3dvARB) (GLuint index, const GLdouble *v);
	void (*DYN_glVertexAttrib3dvNV) (GLuint index, const GLdouble *v);
	void (*DYN_glVertexAttrib3fARB) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
	void (*DYN_glVertexAttrib3fNV) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
	void (*DYN_glVertexAttrib3fvARB) (GLuint index, const GLfloat *v);
	void (*DYN_glVertexAttrib3fvNV) (GLuint index, const GLfloat *v);
	void (*DYN_glVertexAttrib3hNV) (GLuint index, GLhalf x, GLhalf y, GLhalf z);
	void (*DYN_glVertexAttrib3hvNV) (GLuint index, const GLhalf *v);
	void (*DYN_glVertexAttrib3sARB) (GLuint index, GLshort x, GLshort y, GLshort z);
	void (*DYN_glVertexAttrib3sNV) (GLuint index, GLshort x, GLshort y, GLshort z);
	void (*DYN_glVertexAttrib3svARB) (GLuint index, const GLshort *v);
	void (*DYN_glVertexAttrib3svNV) (GLuint index, const GLshort *v);
	void (*DYN_glVertexAttrib4NbvARB) (GLuint index, const GLbyte *v);
	void (*DYN_glVertexAttrib4NivARB) (GLuint index, const GLint *v);
	void (*DYN_glVertexAttrib4NsvARB) (GLuint index, const GLshort *v);
	void (*DYN_glVertexAttrib4NubARB) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	void (*DYN_glVertexAttrib4NubvARB) (GLuint index, const GLubyte *v);
	void (*DYN_glVertexAttrib4NuivARB) (GLuint index, const GLuint *v);
	void (*DYN_glVertexAttrib4NusvARB) (GLuint index, const GLushort *v);
	void (*DYN_glVertexAttrib4bvARB) (GLuint index, const GLbyte *v);
	void (*DYN_glVertexAttrib4dARB) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*DYN_glVertexAttrib4dNV) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
	void (*DYN_glVertexAttrib4dvARB) (GLuint index, const GLdouble *v);
	void (*DYN_glVertexAttrib4dvNV) (GLuint index, const GLdouble *v);
	void (*DYN_glVertexAttrib4fARB) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*DYN_glVertexAttrib4fNV) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
	void (*DYN_glVertexAttrib4fvARB) (GLuint index, const GLfloat *v);
	void (*DYN_glVertexAttrib4fvNV) (GLuint index, const GLfloat *v);
	void (*DYN_glVertexAttrib4hNV) (GLuint index, GLhalf x, GLhalf y, GLhalf z, GLhalf w);
	void (*DYN_glVertexAttrib4hvNV) (GLuint index, const GLhalf *v);
	void (*DYN_glVertexAttrib4ivARB) (GLuint index, const GLint *v);
	void (*DYN_glVertexAttrib4sARB) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	void (*DYN_glVertexAttrib4sNV) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
	void (*DYN_glVertexAttrib4svARB) (GLuint index, const GLshort *v);
	void (*DYN_glVertexAttrib4svNV) (GLuint index, const GLshort *v);
	void (*DYN_glVertexAttrib4ubNV) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
	void (*DYN_glVertexAttrib4ubvARB) (GLuint index, const GLubyte *v);
	void (*DYN_glVertexAttrib4ubvNV) (GLuint index, const GLubyte *v);
	void (*DYN_glVertexAttrib4uivARB) (GLuint index, const GLuint *v);
	void (*DYN_glVertexAttrib4usvARB) (GLuint index, const GLushort *v);
	void (*DYN_glVertexAttribPointerARB) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glVertexAttribPointerNV) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glVertexAttribs1dvNV) (GLuint index, GLsizei count, const GLdouble *v);
	void (*DYN_glVertexAttribs1fvNV) (GLuint index, GLsizei count, const GLfloat *v);
	void (*DYN_glVertexAttribs1hvNV) (GLuint index, GLsizei count, const GLhalf *v);
	void (*DYN_glVertexAttribs1svNV) (GLuint index, GLsizei count, const GLshort *v);
	void (*DYN_glVertexAttribs2dvNV) (GLuint index, GLsizei count, const GLdouble *v);
	void (*DYN_glVertexAttribs2fvNV) (GLuint index, GLsizei count, const GLfloat *v);
	void (*DYN_glVertexAttribs2hvNV) (GLuint index, GLsizei count, const GLhalf *v);
	void (*DYN_glVertexAttribs2svNV) (GLuint index, GLsizei count, const GLshort *v);
	void (*DYN_glVertexAttribs3dvNV) (GLuint index, GLsizei count, const GLdouble *v);
	void (*DYN_glVertexAttribs3fvNV) (GLuint index, GLsizei count, const GLfloat *v);
	void (*DYN_glVertexAttribs3hvNV) (GLuint index, GLsizei count, const GLhalf *v);
	void (*DYN_glVertexAttribs3svNV) (GLuint index, GLsizei count, const GLshort *v);
	void (*DYN_glVertexAttribs4dvNV) (GLuint index, GLsizei count, const GLdouble *v);
	void (*DYN_glVertexAttribs4fvNV) (GLuint index, GLsizei count, const GLfloat *v);
	void (*DYN_glVertexAttribs4hvNV) (GLuint index, GLsizei count, const GLhalf *v);
	void (*DYN_glVertexAttribs4svNV) (GLuint index, GLsizei count, const GLshort *v);
	void (*DYN_glVertexAttribs4ubvNV) (GLuint index, GLsizei count, const GLubyte *v);
	void (*DYN_glVertexPointer) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glVertexPointerEXT) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
	void (*DYN_glVertexWeightPointerEXT) (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
	void (*DYN_glVertexWeightfEXT) (GLfloat weight);
	void (*DYN_glVertexWeightfvEXT) (const GLfloat *weight);
	void (*DYN_glVertexWeighthNV) (GLhalf weight);
	void (*DYN_glVertexWeighthvNV) (const GLhalf *weight);
	void (*DYN_glViewport) (GLint x, GLint y, GLsizei width, GLsizei height);
	void (*DYN_glWindowBackBufferHintAutodesk) (void);
	void (*DYN_glWindowPos2d) (GLdouble x, GLdouble y);
	void (*DYN_glWindowPos2dARB) (GLdouble x, GLdouble y);
	void (*DYN_glWindowPos2dv) (const GLdouble *p);
	void (*DYN_glWindowPos2dvARB) (const GLdouble *p);
	void (*DYN_glWindowPos2f) (GLfloat x, GLfloat y);
	void (*DYN_glWindowPos2fARB) (GLfloat x, GLfloat y);
	void (*DYN_glWindowPos2fv) (const GLfloat *p);
	void (*DYN_glWindowPos2fvARB) (const GLfloat *p);
	void (*DYN_glWindowPos2i) (GLint x, GLint y);
	void (*DYN_glWindowPos2iARB) (GLint x, GLint y);
	void (*DYN_glWindowPos2iv) (const GLint *p);
	void (*DYN_glWindowPos2ivARB) (const GLint *p);
	void (*DYN_glWindowPos2s) (GLshort x, GLshort y);
	void (*DYN_glWindowPos2sARB) (GLshort x, GLshort y);
	void (*DYN_glWindowPos2sv) (const GLshort *p);
	void (*DYN_glWindowPos2svARB) (const GLshort *p);
	void (*DYN_glWindowPos3d) (GLdouble x, GLdouble y, GLdouble z);
	void (*DYN_glWindowPos3dARB) (GLdouble x, GLdouble y, GLdouble z);
	void (*DYN_glWindowPos3dv) (const GLdouble *p);
	void (*DYN_glWindowPos3dvARB) (const GLdouble *p);
	void (*DYN_glWindowPos3f) (GLfloat x, GLfloat y, GLfloat z);
	void (*DYN_glWindowPos3fARB) (GLfloat x, GLfloat y, GLfloat z);
	void (*DYN_glWindowPos3fv) (const GLfloat *p);
	void (*DYN_glWindowPos3fvARB) (const GLfloat *p);
	void (*DYN_glWindowPos3i) (GLint x, GLint y, GLint z);
	void (*DYN_glWindowPos3iARB) (GLint x, GLint y, GLint z);
	void (*DYN_glWindowPos3iv) (const GLint *p);
	void (*DYN_glWindowPos3ivARB) (const GLint *p);
	void (*DYN_glWindowPos3s) (GLshort x, GLshort y, GLshort z);
	void (*DYN_glWindowPos3sARB) (GLshort x, GLshort y, GLshort z);
	void (*DYN_glWindowPos3sv) (const GLshort *p);
	void (*DYN_glWindowPos3svARB) (const GLshort *p);


	bool  init( const char *path)
	{

		if ( SDL_GL_LoadLibrary(path) != 0) {
			return false;
		}
		DYN_glAccum = (void(*)(GLenum op, GLfloat value)) SDL_GL_GetProcAddress( "glAccum");
		DYN_glActiveStencilFaceEXT = (void(*)(GLenum face)) SDL_GL_GetProcAddress( "glActiveStencilFaceEXT");
		DYN_glActiveTexture = (void(*)(GLenum texture)) SDL_GL_GetProcAddress( "glActiveTexture");
		DYN_glActiveTextureARB = (void(*)(GLenum texture)) SDL_GL_GetProcAddress( "glActiveTextureARB");
		DYN_glAddSwapHintRectWIN = (void(*)(GLint x, GLint y, GLsizei width, GLsizei height)) SDL_GL_GetProcAddress( "glAddSwapHintRectWIN");
		DYN_glAlphaFunc = (void(*)(GLenum func, GLclampf ref)) SDL_GL_GetProcAddress( "glAlphaFunc");
		DYN_glAreProgramsResidentNV = (GLboolean(*)(GLsizei n, const GLuint *programs, GLboolean *residences)) SDL_GL_GetProcAddress( "glAreProgramsResidentNV");
		DYN_glAreTexturesResident = (GLboolean(*)(GLsizei n, const GLuint *textures, GLboolean *residences)) SDL_GL_GetProcAddress( "glAreTexturesResident");
		DYN_glAreTexturesResidentEXT = (GLboolean(*)(GLsizei n, const GLuint *textures, GLboolean *residences)) SDL_GL_GetProcAddress( "glAreTexturesResidentEXT");
		DYN_glArrayElement = (void(*)(GLint i)) SDL_GL_GetProcAddress( "glArrayElement");
		DYN_glArrayElementEXT = (void(*)(GLint i)) SDL_GL_GetProcAddress( "glArrayElementEXT");
		DYN_glBegin = (void(*)(GLenum mode)) SDL_GL_GetProcAddress( "glBegin");
		DYN_glBeginOcclusionQueryNV = (void(*)(GLuint id)) SDL_GL_GetProcAddress( "glBeginOcclusionQueryNV");
		DYN_glBindBufferARB = (void(*)(GLenum target, GLuint buffer)) SDL_GL_GetProcAddress( "glBindBufferARB");
		DYN_glBindProgramARB = (void(*)(GLenum target, GLuint program)) SDL_GL_GetProcAddress( "glBindProgramARB");
		DYN_glBindProgramNV = (void(*)(GLenum target, GLuint id)) SDL_GL_GetProcAddress( "glBindProgramNV");
		DYN_glBindTexture = (void(*)(GLenum target, GLuint texture)) SDL_GL_GetProcAddress( "glBindTexture");
		DYN_glBindTextureEXT = (void(*)(GLenum target, GLuint texture)) SDL_GL_GetProcAddress( "glBindTextureEXT");
		DYN_glBitmap = (void(*)(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap)) SDL_GL_GetProcAddress( "glBitmap");
		DYN_glBlendColor = (void(*)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)) SDL_GL_GetProcAddress( "glBlendColor");
		DYN_glBlendColorEXT = (void(*)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)) SDL_GL_GetProcAddress( "glBlendColorEXT");
		DYN_glBlendEquation = (void(*)(GLenum mode)) SDL_GL_GetProcAddress( "glBlendEquation");
		DYN_glBlendEquationEXT = (void(*)(GLenum mode)) SDL_GL_GetProcAddress( "glBlendEquationEXT");
		DYN_glBlendFunc = (void(*)(GLenum sfactor, GLenum dfactor)) SDL_GL_GetProcAddress( "glBlendFunc");
		DYN_glBlendFuncSeparate = (void(*)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)) SDL_GL_GetProcAddress( "glBlendFuncSeparate");
		DYN_glBlendFuncSeparateEXT = (void(*)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)) SDL_GL_GetProcAddress( "glBlendFuncSeparateEXT");
		DYN_glBufferDataARB = (void(*)(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage)) SDL_GL_GetProcAddress( "glBufferDataARB");
		DYN_glBufferSubDataARB = (void(*)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data)) SDL_GL_GetProcAddress( "glBufferSubDataARB");
		DYN_glCallList = (void(*)(GLuint list)) SDL_GL_GetProcAddress( "glCallList");
		DYN_glCallLists = (void(*)(GLsizei n, GLenum type, const GLvoid *lists)) SDL_GL_GetProcAddress( "glCallLists");
		DYN_glClear = (void(*)(GLbitfield mask)) SDL_GL_GetProcAddress( "glClear");
		DYN_glClearAccum = (void(*)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)) SDL_GL_GetProcAddress( "glClearAccum");
		DYN_glClearColor = (void(*)(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)) SDL_GL_GetProcAddress( "glClearColor");
		DYN_glClearDepth = (void(*)(GLclampd depth)) SDL_GL_GetProcAddress( "glClearDepth");
		DYN_glClearIndex = (void(*)(GLfloat c)) SDL_GL_GetProcAddress( "glClearIndex");
		DYN_glClearStencil = (void(*)(GLint s)) SDL_GL_GetProcAddress( "glClearStencil");
		DYN_glClientActiveTexture = (void(*)(GLenum texture)) SDL_GL_GetProcAddress( "glClientActiveTexture");
		DYN_glClientActiveTextureARB = (void(*)(GLenum texture)) SDL_GL_GetProcAddress( "glClientActiveTextureARB");
		DYN_glClipPlane = (void(*)(GLenum plane, const GLdouble *equation)) SDL_GL_GetProcAddress( "glClipPlane");
		DYN_glColor3b = (void(*)(GLbyte red, GLbyte green, GLbyte blue)) SDL_GL_GetProcAddress( "glColor3b");
		DYN_glColor3bv = (void(*)(const GLbyte *v)) SDL_GL_GetProcAddress( "glColor3bv");
		DYN_glColor3d = (void(*)(GLdouble red, GLdouble green, GLdouble blue)) SDL_GL_GetProcAddress( "glColor3d");
		DYN_glColor3dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glColor3dv");
		DYN_glColor3f = (void(*)(GLfloat red, GLfloat green, GLfloat blue)) SDL_GL_GetProcAddress( "glColor3f");
		DYN_glColor3fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glColor3fv");
		DYN_glColor3hNV = (void(*)(GLhalf red, GLhalf green, GLhalf blue)) SDL_GL_GetProcAddress( "glColor3hNV");
		DYN_glColor3hvNV = (void(*)(const GLhalf *v)) SDL_GL_GetProcAddress( "glColor3hvNV");
		DYN_glColor3i = (void(*)(GLint red, GLint green, GLint blue)) SDL_GL_GetProcAddress( "glColor3i");
		DYN_glColor3iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glColor3iv");
		DYN_glColor3s = (void(*)(GLshort red, GLshort green, GLshort blue)) SDL_GL_GetProcAddress( "glColor3s");
		DYN_glColor3sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glColor3sv");
		DYN_glColor3ub = (void(*)(GLubyte red, GLubyte green, GLubyte blue)) SDL_GL_GetProcAddress( "glColor3ub");
		DYN_glColor3ubv = (void(*)(const GLubyte *v)) SDL_GL_GetProcAddress( "glColor3ubv");
		DYN_glColor3ui = (void(*)(GLuint red, GLuint green, GLuint blue)) SDL_GL_GetProcAddress( "glColor3ui");
		DYN_glColor3uiv = (void(*)(const GLuint *v)) SDL_GL_GetProcAddress( "glColor3uiv");
		DYN_glColor3us = (void(*)(GLushort red, GLushort green, GLushort blue)) SDL_GL_GetProcAddress( "glColor3us");
		DYN_glColor3usv = (void(*)(const GLushort *v)) SDL_GL_GetProcAddress( "glColor3usv");
		DYN_glColor4b = (void(*)(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha)) SDL_GL_GetProcAddress( "glColor4b");
		DYN_glColor4bv = (void(*)(const GLbyte *v)) SDL_GL_GetProcAddress( "glColor4bv");
		DYN_glColor4d = (void(*)(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha)) SDL_GL_GetProcAddress( "glColor4d");
		DYN_glColor4dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glColor4dv");
		DYN_glColor4f = (void(*)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)) SDL_GL_GetProcAddress( "glColor4f");
		DYN_glColor4fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glColor4fv");
		DYN_glColor4hNV = (void(*)(GLhalf red, GLhalf green, GLhalf blue, GLhalf alpha)) SDL_GL_GetProcAddress( "glColor4hNV");
		DYN_glColor4hvNV = (void(*)(const GLhalf *v)) SDL_GL_GetProcAddress( "glColor4hvNV");
		DYN_glColor4i = (void(*)(GLint red, GLint green, GLint blue, GLint alpha)) SDL_GL_GetProcAddress( "glColor4i");
		DYN_glColor4iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glColor4iv");
		DYN_glColor4s = (void(*)(GLshort red, GLshort green, GLshort blue, GLshort alpha)) SDL_GL_GetProcAddress( "glColor4s");
		DYN_glColor4sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glColor4sv");
		DYN_glColor4ub = (void(*)(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha)) SDL_GL_GetProcAddress( "glColor4ub");
		DYN_glColor4ubv = (void(*)(const GLubyte *v)) SDL_GL_GetProcAddress( "glColor4ubv");
		DYN_glColor4ui = (void(*)(GLuint red, GLuint green, GLuint blue, GLuint alpha)) SDL_GL_GetProcAddress( "glColor4ui");
		DYN_glColor4uiv = (void(*)(const GLuint *v)) SDL_GL_GetProcAddress( "glColor4uiv");
		DYN_glColor4us = (void(*)(GLushort red, GLushort green, GLushort blue, GLushort alpha)) SDL_GL_GetProcAddress( "glColor4us");
		DYN_glColor4usv = (void(*)(const GLushort *v)) SDL_GL_GetProcAddress( "glColor4usv");
		DYN_glColorMask = (void(*)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)) SDL_GL_GetProcAddress( "glColorMask");
		DYN_glColorMaterial = (void(*)(GLenum face, GLenum mode)) SDL_GL_GetProcAddress( "glColorMaterial");
		DYN_glColorPointer = (void(*)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glColorPointer");
		DYN_glColorPointerEXT = (void(*)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glColorPointerEXT");
		DYN_glColorSubTable = (void(*)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)) SDL_GL_GetProcAddress( "glColorSubTable");
		DYN_glColorSubTableEXT = (void(*)(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *table)) SDL_GL_GetProcAddress( "glColorSubTableEXT");
		DYN_glColorTable = (void(*)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)) SDL_GL_GetProcAddress( "glColorTable");
		DYN_glColorTableEXT = (void(*)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)) SDL_GL_GetProcAddress( "glColorTableEXT");
		DYN_glColorTableParameterfv = (void(*)(GLenum target, GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glColorTableParameterfv");
		DYN_glColorTableParameteriv = (void(*)(GLenum target, GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glColorTableParameteriv");
		DYN_glCombinerInputNV = (void(*)(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)) SDL_GL_GetProcAddress( "glCombinerInputNV");
		DYN_glCombinerOutputNV = (void(*)(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)) SDL_GL_GetProcAddress( "glCombinerOutputNV");
		DYN_glCombinerParameterfNV = (void(*)(GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glCombinerParameterfNV");
		DYN_glCombinerParameterfvNV = (void(*)(GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glCombinerParameterfvNV");
		DYN_glCombinerParameteriNV = (void(*)(GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glCombinerParameteriNV");
		DYN_glCombinerParameterivNV = (void(*)(GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glCombinerParameterivNV");
		DYN_glCombinerStageParameterfvNV = (void(*)(GLenum stage, GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glCombinerStageParameterfvNV");
		DYN_glCompressedTexImage1D = (void(*)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexImage1D");
		DYN_glCompressedTexImage1DARB = (void(*)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexImage1DARB");
		DYN_glCompressedTexImage2D = (void(*)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexImage2D");
		DYN_glCompressedTexImage2DARB = (void(*)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexImage2DARB");
		DYN_glCompressedTexImage3D = (void(*)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexImage3D");
		DYN_glCompressedTexImage3DARB = (void(*)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexImage3DARB");
		DYN_glCompressedTexSubImage1D = (void(*)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexSubImage1D");
		DYN_glCompressedTexSubImage1DARB = (void(*)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexSubImage1DARB");
		DYN_glCompressedTexSubImage2D = (void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexSubImage2D");
		DYN_glCompressedTexSubImage2DARB = (void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexSubImage2DARB");
		DYN_glCompressedTexSubImage3D = (void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexSubImage3D");
		DYN_glCompressedTexSubImage3DARB = (void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)) SDL_GL_GetProcAddress( "glCompressedTexSubImage3DARB");
		DYN_glConvolutionFilter1D = (void(*)(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)) SDL_GL_GetProcAddress( "glConvolutionFilter1D");
		DYN_glConvolutionFilter2D = (void(*)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)) SDL_GL_GetProcAddress( "glConvolutionFilter2D");
		DYN_glConvolutionParameterf = (void(*)(GLenum target, GLenum pname, GLfloat params)) SDL_GL_GetProcAddress( "glConvolutionParameterf");
		DYN_glConvolutionParameterfv = (void(*)(GLenum target, GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glConvolutionParameterfv");
		DYN_glConvolutionParameteri = (void(*)(GLenum target, GLenum pname, GLint params)) SDL_GL_GetProcAddress( "glConvolutionParameteri");
		DYN_glConvolutionParameteriv = (void(*)(GLenum target, GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glConvolutionParameteriv");
		DYN_glCopyColorSubTable = (void(*)(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)) SDL_GL_GetProcAddress( "glCopyColorSubTable");
		DYN_glCopyColorTable = (void(*)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)) SDL_GL_GetProcAddress( "glCopyColorTable");
		DYN_glCopyConvolutionFilter1D = (void(*)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)) SDL_GL_GetProcAddress( "glCopyConvolutionFilter1D");
		DYN_glCopyConvolutionFilter2D = (void(*)(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)) SDL_GL_GetProcAddress( "glCopyConvolutionFilter2D");
		DYN_glCopyPixels = (void(*)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type)) SDL_GL_GetProcAddress( "glCopyPixels");
		DYN_glCopyTexImage1D = (void(*)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)) SDL_GL_GetProcAddress( "glCopyTexImage1D");
		DYN_glCopyTexImage2D = (void(*)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)) SDL_GL_GetProcAddress( "glCopyTexImage2D");
		DYN_glCopyTexSubImage1D = (void(*)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)) SDL_GL_GetProcAddress( "glCopyTexSubImage1D");
		DYN_glCopyTexSubImage2D = (void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)) SDL_GL_GetProcAddress( "glCopyTexSubImage2D");
		DYN_glCopyTexSubImage3D = (void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)) SDL_GL_GetProcAddress( "glCopyTexSubImage3D");
		DYN_glCopyTexSubImage3DEXT = (void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)) SDL_GL_GetProcAddress( "glCopyTexSubImage3DEXT");
		DYN_glCullFace = (void(*)(GLenum mode)) SDL_GL_GetProcAddress( "glCullFace");
		DYN_glDeleteBuffersARB = (void(*)(GLsizei n, const GLuint *buffers)) SDL_GL_GetProcAddress( "glDeleteBuffersARB");
		DYN_glDeleteFencesNV = (void(*)(GLsizei n, const GLuint *fences)) SDL_GL_GetProcAddress( "glDeleteFencesNV");
		DYN_glDeleteLists = (void(*)(GLuint list, GLsizei range)) SDL_GL_GetProcAddress( "glDeleteLists");
		DYN_glDeleteOcclusionQueriesNV = (void(*)(GLsizei n, const GLuint *ids)) SDL_GL_GetProcAddress( "glDeleteOcclusionQueriesNV");
		DYN_glDeleteProgramsARB = (void(*)(GLsizei n, const GLuint *programs)) SDL_GL_GetProcAddress( "glDeleteProgramsARB");
		DYN_glDeleteProgramsNV = (void(*)(GLsizei n, const GLuint *programs)) SDL_GL_GetProcAddress( "glDeleteProgramsNV");
		DYN_glDeleteTextures = (void(*)(GLsizei n, const GLuint *textures)) SDL_GL_GetProcAddress( "glDeleteTextures");
		DYN_glDeleteTexturesEXT = (void(*)(GLsizei n, const GLuint *textures)) SDL_GL_GetProcAddress( "glDeleteTexturesEXT");
		DYN_glDepthBoundsEXT = (void(*)(GLclampd zmin, GLclampd zmax)) SDL_GL_GetProcAddress( "glDepthBoundsEXT");
		DYN_glDepthFunc = (void(*)(GLenum func)) SDL_GL_GetProcAddress( "glDepthFunc");
		DYN_glDepthMask = (void(*)(GLboolean flag)) SDL_GL_GetProcAddress( "glDepthMask");
		DYN_glDepthRange = (void(*)(GLclampd zNear, GLclampd zFar)) SDL_GL_GetProcAddress( "glDepthRange");
		DYN_glDisable = (void(*)(GLenum cap)) SDL_GL_GetProcAddress( "glDisable");
		DYN_glDisableClientState = (void(*)(GLenum array)) SDL_GL_GetProcAddress( "glDisableClientState");
		DYN_glDisableVertexAttribArrayARB = (void(*)(GLuint index)) SDL_GL_GetProcAddress( "glDisableVertexAttribArrayARB");
		DYN_glDrawArrays = (void(*)(GLenum mode, GLint first, GLsizei count)) SDL_GL_GetProcAddress( "glDrawArrays");
		DYN_glDrawArraysEXT = (void(*)(GLenum mode, GLint first, GLsizei count)) SDL_GL_GetProcAddress( "glDrawArraysEXT");
		DYN_glDrawBuffer = (void(*)(GLenum mode)) SDL_GL_GetProcAddress( "glDrawBuffer");
		DYN_glDrawElements = (void(*)(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices)) SDL_GL_GetProcAddress( "glDrawElements");
		DYN_glDrawMeshNV = (void(*)(GLenum mode, GLsizei count, GLenum type, GLsizei stride, const GLvoid *indicesTexCoord, const GLvoid *indicesNormal, const GLvoid *indicesVertex)) SDL_GL_GetProcAddress( "glDrawMeshNV");
		DYN_glDrawPixels = (void(*)(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)) SDL_GL_GetProcAddress( "glDrawPixels");
		DYN_glDrawRangeElements = (void(*)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)) SDL_GL_GetProcAddress( "glDrawRangeElements");
		DYN_glDrawRangeElementsEXT = (void(*)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)) SDL_GL_GetProcAddress( "glDrawRangeElementsEXT");
		DYN_glEdgeFlag = (void(*)(GLboolean flag)) SDL_GL_GetProcAddress( "glEdgeFlag");
		DYN_glEdgeFlagPointer = (void(*)(GLsizei stride, const GLboolean *pointer)) SDL_GL_GetProcAddress( "glEdgeFlagPointer");
		DYN_glEdgeFlagPointerEXT = (void(*)(GLsizei stride, GLsizei count, const GLboolean *pointer)) SDL_GL_GetProcAddress( "glEdgeFlagPointerEXT");
		DYN_glEdgeFlagv = (void(*)(const GLboolean *flag)) SDL_GL_GetProcAddress( "glEdgeFlagv");
		DYN_glEnable = (void(*)(GLenum cap)) SDL_GL_GetProcAddress( "glEnable");
		DYN_glEnableClientState = (void(*)(GLenum array)) SDL_GL_GetProcAddress( "glEnableClientState");
		DYN_glEnableVertexAttribArrayARB = (void(*)(GLuint index)) SDL_GL_GetProcAddress( "glEnableVertexAttribArrayARB");
		DYN_glEnd = (void(*)(void)) SDL_GL_GetProcAddress( "glEnd");
		DYN_glEndList = (void(*)(void)) SDL_GL_GetProcAddress( "glEndList");
		DYN_glEndOcclusionQueryNV = (void(*)(void)) SDL_GL_GetProcAddress( "glEndOcclusionQueryNV");
		DYN_glEvalCoord1d = (void(*)(GLdouble u)) SDL_GL_GetProcAddress( "glEvalCoord1d");
		DYN_glEvalCoord1dv = (void(*)(const GLdouble *u)) SDL_GL_GetProcAddress( "glEvalCoord1dv");
		DYN_glEvalCoord1f = (void(*)(GLfloat u)) SDL_GL_GetProcAddress( "glEvalCoord1f");
		DYN_glEvalCoord1fv = (void(*)(const GLfloat *u)) SDL_GL_GetProcAddress( "glEvalCoord1fv");
		DYN_glEvalCoord2d = (void(*)(GLdouble u, GLdouble v)) SDL_GL_GetProcAddress( "glEvalCoord2d");
		DYN_glEvalCoord2dv = (void(*)(const GLdouble *u)) SDL_GL_GetProcAddress( "glEvalCoord2dv");
		DYN_glEvalCoord2f = (void(*)(GLfloat u, GLfloat v)) SDL_GL_GetProcAddress( "glEvalCoord2f");
		DYN_glEvalCoord2fv = (void(*)(const GLfloat *u)) SDL_GL_GetProcAddress( "glEvalCoord2fv");
		DYN_glEvalMesh1 = (void(*)(GLenum mode, GLint i1, GLint i2)) SDL_GL_GetProcAddress( "glEvalMesh1");
		DYN_glEvalMesh2 = (void(*)(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2)) SDL_GL_GetProcAddress( "glEvalMesh2");
		DYN_glEvalPoint1 = (void(*)(GLint i)) SDL_GL_GetProcAddress( "glEvalPoint1");
		DYN_glEvalPoint2 = (void(*)(GLint i, GLint j)) SDL_GL_GetProcAddress( "glEvalPoint2");
		DYN_glExecuteProgramNV = (void(*)(GLenum target, GLuint id, const GLfloat *params)) SDL_GL_GetProcAddress( "glExecuteProgramNV");
		DYN_glFeedbackBuffer = (void(*)(GLsizei size, GLenum type, GLfloat *buffer)) SDL_GL_GetProcAddress( "glFeedbackBuffer");
		DYN_glFinalCombinerInputNV = (void(*)(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)) SDL_GL_GetProcAddress( "glFinalCombinerInputNV");
		DYN_glFinish = (void(*)(void)) SDL_GL_GetProcAddress( "glFinish");
		DYN_glFinishFenceNV = (void(*)(GLuint fence)) SDL_GL_GetProcAddress( "glFinishFenceNV");
		DYN_glFlush = (void(*)(void)) SDL_GL_GetProcAddress( "glFlush");
		DYN_glFlushHold = (GLuint(*)(void)) SDL_GL_GetProcAddress( "glFlushHold");
		DYN_glFlushPixelDataRangeNV = (void(*)(GLenum target)) SDL_GL_GetProcAddress( "glFlushPixelDataRangeNV");
		DYN_glFlushVertexArrayRangeNV = (void(*)(void)) SDL_GL_GetProcAddress( "glFlushVertexArrayRangeNV");
		DYN_glFogCoordPointer = (void(*)(GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glFogCoordPointer");
		DYN_glFogCoordPointerEXT = (void(*)(GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glFogCoordPointerEXT");
		DYN_glFogCoordd = (void(*)(GLdouble fog)) SDL_GL_GetProcAddress( "glFogCoordd");
		DYN_glFogCoorddEXT = (void(*)(GLdouble fog)) SDL_GL_GetProcAddress( "glFogCoorddEXT");
		DYN_glFogCoorddv = (void(*)(const GLdouble *fog)) SDL_GL_GetProcAddress( "glFogCoorddv");
		DYN_glFogCoorddvEXT = (void(*)(const GLdouble *fog)) SDL_GL_GetProcAddress( "glFogCoorddvEXT");
		DYN_glFogCoordf = (void(*)(GLfloat fog)) SDL_GL_GetProcAddress( "glFogCoordf");
		DYN_glFogCoordfEXT = (void(*)(GLfloat fog)) SDL_GL_GetProcAddress( "glFogCoordfEXT");
		DYN_glFogCoordfv = (void(*)(const GLfloat *fog)) SDL_GL_GetProcAddress( "glFogCoordfv");
		DYN_glFogCoordfvEXT = (void(*)(const GLfloat *fog)) SDL_GL_GetProcAddress( "glFogCoordfvEXT");
		DYN_glFogCoordhNV = (void(*)(GLhalf fog)) SDL_GL_GetProcAddress( "glFogCoordhNV");
		DYN_glFogCoordhvNV = (void(*)(const GLhalf *fog)) SDL_GL_GetProcAddress( "glFogCoordhvNV");
		DYN_glFogf = (void(*)(GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glFogf");
		DYN_glFogfv = (void(*)(GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glFogfv");
		DYN_glFogi = (void(*)(GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glFogi");
		DYN_glFogiv = (void(*)(GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glFogiv");
		DYN_glFrontFace = (void(*)(GLenum mode)) SDL_GL_GetProcAddress( "glFrontFace");
		DYN_glFrustum = (void(*)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)) SDL_GL_GetProcAddress( "glFrustum");
		DYN_glGenBuffersARB = (void(*)(GLsizei n, GLuint *buffers)) SDL_GL_GetProcAddress( "glGenBuffersARB");
		DYN_glGenFencesNV = (void(*)(GLsizei n, GLuint *fences)) SDL_GL_GetProcAddress( "glGenFencesNV");
		DYN_glGenLists = (GLuint(*)(GLsizei range)) SDL_GL_GetProcAddress( "glGenLists");
		DYN_glGenOcclusionQueriesNV = (void(*)(GLsizei n, GLuint *ids)) SDL_GL_GetProcAddress( "glGenOcclusionQueriesNV");
		DYN_glGenProgramsARB = (void(*)(GLsizei n, GLuint *programs)) SDL_GL_GetProcAddress( "glGenProgramsARB");
		DYN_glGenProgramsNV = (void(*)(GLsizei n, GLuint *programs)) SDL_GL_GetProcAddress( "glGenProgramsNV");
		DYN_glGenTextures = (void(*)(GLsizei n, GLuint *textures)) SDL_GL_GetProcAddress( "glGenTextures");
		DYN_glGenTexturesEXT = (void(*)(GLsizei n, GLuint *textures)) SDL_GL_GetProcAddress( "glGenTexturesEXT");
		DYN_glGetBooleanv = (void(*)(GLenum pname, GLboolean *params)) SDL_GL_GetProcAddress( "glGetBooleanv");
		DYN_glGetBufferParameterivARB = (void(*)(GLenum target, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetBufferParameterivARB");
		DYN_glGetBufferPointervARB = (void(*)(GLenum target, GLenum pname, GLvoid* *params)) SDL_GL_GetProcAddress( "glGetBufferPointervARB");
		DYN_glGetBufferSubDataARB = (void(*)(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data)) SDL_GL_GetProcAddress( "glGetBufferSubDataARB");
		DYN_glGetClipPlane = (void(*)(GLenum plane, GLdouble *equation)) SDL_GL_GetProcAddress( "glGetClipPlane");
		DYN_glGetColorTable = (void(*)(GLenum target, GLenum format, GLenum type, GLvoid *table)) SDL_GL_GetProcAddress( "glGetColorTable");
		DYN_glGetColorTableEXT = (void(*)(GLenum target, GLenum format, GLenum type, GLvoid *table)) SDL_GL_GetProcAddress( "glGetColorTableEXT");
		DYN_glGetColorTableParameterfv = (void(*)(GLenum target, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetColorTableParameterfv");
		DYN_glGetColorTableParameterfvEXT = (void(*)(GLenum target, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetColorTableParameterfvEXT");
		DYN_glGetColorTableParameteriv = (void(*)(GLenum target, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetColorTableParameteriv");
		DYN_glGetColorTableParameterivEXT = (void(*)(GLenum target, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetColorTableParameterivEXT");
		DYN_glGetCombinerInputParameterfvNV = (void(*)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetCombinerInputParameterfvNV");
		DYN_glGetCombinerInputParameterivNV = (void(*)(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetCombinerInputParameterivNV");
		DYN_glGetCombinerOutputParameterfvNV = (void(*)(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetCombinerOutputParameterfvNV");
		DYN_glGetCombinerOutputParameterivNV = (void(*)(GLenum stage, GLenum portion, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetCombinerOutputParameterivNV");
		DYN_glGetCombinerStageParameterfvNV = (void(*)(GLenum stage, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetCombinerStageParameterfvNV");
		DYN_glGetCompressedTexImage = (void(*)(GLenum target, GLint lod, GLvoid *img)) SDL_GL_GetProcAddress( "glGetCompressedTexImage");
		DYN_glGetCompressedTexImageARB = (void(*)(GLenum target, GLint lod, GLvoid *img)) SDL_GL_GetProcAddress( "glGetCompressedTexImageARB");
		DYN_glGetConvolutionFilter = (void(*)(GLenum target, GLenum format, GLenum type, GLvoid *image)) SDL_GL_GetProcAddress( "glGetConvolutionFilter");
		DYN_glGetConvolutionParameterfv = (void(*)(GLenum target, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetConvolutionParameterfv");
		DYN_glGetConvolutionParameteriv = (void(*)(GLenum target, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetConvolutionParameteriv");
		DYN_glGetDoublev = (void(*)(GLenum pname, GLdouble *params)) SDL_GL_GetProcAddress( "glGetDoublev");
		DYN_glGetError = (GLenum(*)(void)) SDL_GL_GetProcAddress( "glGetError");
		DYN_glGetFenceivNV = (void(*)(GLuint fence, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetFenceivNV");
		DYN_glGetFinalCombinerInputParameterfvNV = (void(*)(GLenum variable, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetFinalCombinerInputParameterfvNV");
		DYN_glGetFinalCombinerInputParameterivNV = (void(*)(GLenum variable, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetFinalCombinerInputParameterivNV");
		DYN_glGetFloatv = (void(*)(GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetFloatv");
		DYN_glGetHistogram = (void(*)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)) SDL_GL_GetProcAddress( "glGetHistogram");
		DYN_glGetHistogramParameterfv = (void(*)(GLenum target, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetHistogramParameterfv");
		DYN_glGetHistogramParameteriv = (void(*)(GLenum target, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetHistogramParameteriv");
		DYN_glGetIntegerv = (void(*)(GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetIntegerv");
		DYN_glGetLightfv = (void(*)(GLenum light, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetLightfv");
		DYN_glGetLightiv = (void(*)(GLenum light, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetLightiv");
		DYN_glGetMapdv = (void(*)(GLenum target, GLenum query, GLdouble *v)) SDL_GL_GetProcAddress( "glGetMapdv");
		DYN_glGetMapfv = (void(*)(GLenum target, GLenum query, GLfloat *v)) SDL_GL_GetProcAddress( "glGetMapfv");
		DYN_glGetMapiv = (void(*)(GLenum target, GLenum query, GLint *v)) SDL_GL_GetProcAddress( "glGetMapiv");
		DYN_glGetMaterialfv = (void(*)(GLenum face, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetMaterialfv");
		DYN_glGetMaterialiv = (void(*)(GLenum face, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetMaterialiv");
		DYN_glGetMinmax = (void(*)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)) SDL_GL_GetProcAddress( "glGetMinmax");
		DYN_glGetMinmaxParameterfv = (void(*)(GLenum target, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetMinmaxParameterfv");
		DYN_glGetMinmaxParameteriv = (void(*)(GLenum target, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetMinmaxParameteriv");
		DYN_glGetOcclusionQueryivNV = (void(*)(GLuint id, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetOcclusionQueryivNV");
		DYN_glGetOcclusionQueryuivNV = (void(*)(GLuint id, GLenum pname, GLuint *params)) SDL_GL_GetProcAddress( "glGetOcclusionQueryuivNV");
		DYN_glGetPixelMapfv = (void(*)(GLenum map, GLfloat *values)) SDL_GL_GetProcAddress( "glGetPixelMapfv");
		DYN_glGetPixelMapuiv = (void(*)(GLenum map, GLuint *values)) SDL_GL_GetProcAddress( "glGetPixelMapuiv");
		DYN_glGetPixelMapusv = (void(*)(GLenum map, GLushort *values)) SDL_GL_GetProcAddress( "glGetPixelMapusv");
		DYN_glGetPointerv = (void(*)(GLenum pname, GLvoid* *params)) SDL_GL_GetProcAddress( "glGetPointerv");
		DYN_glGetPointervEXT = (void(*)(GLenum pname, GLvoid* *params)) SDL_GL_GetProcAddress( "glGetPointervEXT");
		DYN_glGetPolygonStipple = (void(*)(GLubyte *mask)) SDL_GL_GetProcAddress( "glGetPolygonStipple");
		DYN_glGetProgramEnvParameterdvARB = (void(*)(GLenum target, GLuint index, GLdouble *params)) SDL_GL_GetProcAddress( "glGetProgramEnvParameterdvARB");
		DYN_glGetProgramEnvParameterfvARB = (void(*)(GLenum target, GLuint index, GLfloat *params)) SDL_GL_GetProcAddress( "glGetProgramEnvParameterfvARB");
		DYN_glGetProgramLocalParameterdvARB = (void(*)(GLenum target, GLuint index, GLdouble *params)) SDL_GL_GetProcAddress( "glGetProgramLocalParameterdvARB");
		DYN_glGetProgramLocalParameterfvARB = (void(*)(GLenum target, GLuint index, GLfloat *params)) SDL_GL_GetProcAddress( "glGetProgramLocalParameterfvARB");
		DYN_glGetProgramNamedParameterdvNV = (void(*)(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)) SDL_GL_GetProcAddress( "glGetProgramNamedParameterdvNV");
		DYN_glGetProgramNamedParameterfvNV = (void(*)(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)) SDL_GL_GetProcAddress( "glGetProgramNamedParameterfvNV");
		DYN_glGetProgramParameterdvNV = (void(*)(GLenum target, GLuint index, GLenum pname, GLdouble *params)) SDL_GL_GetProcAddress( "glGetProgramParameterdvNV");
		DYN_glGetProgramParameterfvNV = (void(*)(GLenum target, GLuint index, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetProgramParameterfvNV");
		DYN_glGetProgramStringARB = (void(*)(GLenum target, GLenum pname, GLvoid *string)) SDL_GL_GetProcAddress( "glGetProgramStringARB");
		DYN_glGetProgramStringNV = (void(*)(GLuint id, GLenum pname, GLubyte *program)) SDL_GL_GetProcAddress( "glGetProgramStringNV");
		DYN_glGetProgramivARB = (void(*)(GLenum target, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetProgramivARB");
		DYN_glGetProgramivNV = (void(*)(GLuint id, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetProgramivNV");
		DYN_glGetSeparableFilter = (void(*)(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)) SDL_GL_GetProcAddress( "glGetSeparableFilter");
		DYN_glGetString = (const GLubyte *(*)(GLenum name)) SDL_GL_GetProcAddress( "glGetString");
		DYN_glGetTexEnvfv = (void(*)(GLenum target, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetTexEnvfv");
		DYN_glGetTexEnviv = (void(*)(GLenum target, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetTexEnviv");
		DYN_glGetTexGendv = (void(*)(GLenum coord, GLenum pname, GLdouble *params)) SDL_GL_GetProcAddress( "glGetTexGendv");
		DYN_glGetTexGenfv = (void(*)(GLenum coord, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetTexGenfv");
		DYN_glGetTexGeniv = (void(*)(GLenum coord, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetTexGeniv");
		DYN_glGetTexImage = (void(*)(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)) SDL_GL_GetProcAddress( "glGetTexImage");
		DYN_glGetTexLevelParameterfv = (void(*)(GLenum target, GLint level, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetTexLevelParameterfv");
		DYN_glGetTexLevelParameteriv = (void(*)(GLenum target, GLint level, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetTexLevelParameteriv");
		DYN_glGetTexParameterfv = (void(*)(GLenum target, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetTexParameterfv");
		DYN_glGetTexParameteriv = (void(*)(GLenum target, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetTexParameteriv");
		DYN_glGetTrackMatrixivNV = (void(*)(GLenum target, GLuint address, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetTrackMatrixivNV");
		DYN_glGetVertexAttribPointervARB = (void(*)(GLuint index, GLenum pname, GLvoid* *pointer)) SDL_GL_GetProcAddress( "glGetVertexAttribPointervARB");
		DYN_glGetVertexAttribPointervNV = (void(*)(GLuint index, GLenum pname, GLvoid* *pointer)) SDL_GL_GetProcAddress( "glGetVertexAttribPointervNV");
		DYN_glGetVertexAttribdvARB = (void(*)(GLuint index, GLenum pname, GLdouble *params)) SDL_GL_GetProcAddress( "glGetVertexAttribdvARB");
		DYN_glGetVertexAttribdvNV = (void(*)(GLuint index, GLenum pname, GLdouble *params)) SDL_GL_GetProcAddress( "glGetVertexAttribdvNV");
		DYN_glGetVertexAttribfvARB = (void(*)(GLuint index, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetVertexAttribfvARB");
		DYN_glGetVertexAttribfvNV = (void(*)(GLuint index, GLenum pname, GLfloat *params)) SDL_GL_GetProcAddress( "glGetVertexAttribfvNV");
		DYN_glGetVertexAttribivARB = (void(*)(GLuint index, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetVertexAttribivARB");
		DYN_glGetVertexAttribivNV = (void(*)(GLuint index, GLenum pname, GLint *params)) SDL_GL_GetProcAddress( "glGetVertexAttribivNV");
		DYN_glHint = (void(*)(GLenum target, GLenum mode)) SDL_GL_GetProcAddress( "glHint");
		DYN_glHistogram = (void(*)(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)) SDL_GL_GetProcAddress( "glHistogram");
		DYN_glIndexMask = (void(*)(GLuint mask)) SDL_GL_GetProcAddress( "glIndexMask");
		DYN_glIndexPointer = (void(*)(GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glIndexPointer");
		DYN_glIndexPointerEXT = (void(*)(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glIndexPointerEXT");
		DYN_glIndexd = (void(*)(GLdouble c)) SDL_GL_GetProcAddress( "glIndexd");
		DYN_glIndexdv = (void(*)(const GLdouble *c)) SDL_GL_GetProcAddress( "glIndexdv");
		DYN_glIndexf = (void(*)(GLfloat c)) SDL_GL_GetProcAddress( "glIndexf");
		DYN_glIndexfv = (void(*)(const GLfloat *c)) SDL_GL_GetProcAddress( "glIndexfv");
		DYN_glIndexi = (void(*)(GLint c)) SDL_GL_GetProcAddress( "glIndexi");
		DYN_glIndexiv = (void(*)(const GLint *c)) SDL_GL_GetProcAddress( "glIndexiv");
		DYN_glIndexs = (void(*)(GLshort c)) SDL_GL_GetProcAddress( "glIndexs");
		DYN_glIndexsv = (void(*)(const GLshort *c)) SDL_GL_GetProcAddress( "glIndexsv");
		DYN_glIndexub = (void(*)(GLubyte c)) SDL_GL_GetProcAddress( "glIndexub");
		DYN_glIndexubv = (void(*)(const GLubyte *c)) SDL_GL_GetProcAddress( "glIndexubv");
		DYN_glInitNames = (void(*)(void)) SDL_GL_GetProcAddress( "glInitNames");
		DYN_glInterleavedArrays = (void(*)(GLenum format, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glInterleavedArrays");
		DYN_glIsBufferARB = (GLboolean(*)(GLuint buffer)) SDL_GL_GetProcAddress( "glIsBufferARB");
		DYN_glIsEnabled = (GLboolean(*)(GLenum cap)) SDL_GL_GetProcAddress( "glIsEnabled");
		DYN_glIsFenceNV = (GLboolean(*)(GLuint fence)) SDL_GL_GetProcAddress( "glIsFenceNV");
		DYN_glIsList = (GLboolean(*)(GLuint list)) SDL_GL_GetProcAddress( "glIsList");
		DYN_glIsOcclusionQueryNV = (GLboolean(*)(GLuint id)) SDL_GL_GetProcAddress( "glIsOcclusionQueryNV");
		DYN_glIsProgramARB = (GLboolean(*)(GLuint program)) SDL_GL_GetProcAddress( "glIsProgramARB");
		DYN_glIsProgramNV = (GLboolean(*)(GLuint id)) SDL_GL_GetProcAddress( "glIsProgramNV");
		DYN_glIsTexture = (GLboolean(*)(GLuint texture)) SDL_GL_GetProcAddress( "glIsTexture");
		DYN_glIsTextureEXT = (GLboolean(*)(GLuint texture)) SDL_GL_GetProcAddress( "glIsTextureEXT");
		DYN_glLightModelf = (void(*)(GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glLightModelf");
		DYN_glLightModelfv = (void(*)(GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glLightModelfv");
		DYN_glLightModeli = (void(*)(GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glLightModeli");
		DYN_glLightModeliv = (void(*)(GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glLightModeliv");
		DYN_glLightf = (void(*)(GLenum light, GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glLightf");
		DYN_glLightfv = (void(*)(GLenum light, GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glLightfv");
		DYN_glLighti = (void(*)(GLenum light, GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glLighti");
		DYN_glLightiv = (void(*)(GLenum light, GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glLightiv");
		DYN_glLineStipple = (void(*)(GLint factor, GLushort pattern)) SDL_GL_GetProcAddress( "glLineStipple");
		DYN_glLineWidth = (void(*)(GLfloat width)) SDL_GL_GetProcAddress( "glLineWidth");
		DYN_glListBase = (void(*)(GLuint base)) SDL_GL_GetProcAddress( "glListBase");
		DYN_glLoadIdentity = (void(*)(void)) SDL_GL_GetProcAddress( "glLoadIdentity");
		DYN_glLoadMatrixd = (void(*)(const GLdouble *m)) SDL_GL_GetProcAddress( "glLoadMatrixd");
		DYN_glLoadMatrixf = (void(*)(const GLfloat *m)) SDL_GL_GetProcAddress( "glLoadMatrixf");
		DYN_glLoadName = (void(*)(GLuint name)) SDL_GL_GetProcAddress( "glLoadName");
		DYN_glLoadProgramNV = (void(*)(GLenum target, GLuint id, GLsizei len, const GLubyte *program)) SDL_GL_GetProcAddress( "glLoadProgramNV");
		DYN_glLoadTransposeMatrixd = (void(*)(const GLdouble *m)) SDL_GL_GetProcAddress( "glLoadTransposeMatrixd");
		DYN_glLoadTransposeMatrixdARB = (void(*)(const GLdouble *m)) SDL_GL_GetProcAddress( "glLoadTransposeMatrixdARB");
		DYN_glLoadTransposeMatrixf = (void(*)(const GLfloat *m)) SDL_GL_GetProcAddress( "glLoadTransposeMatrixf");
		DYN_glLoadTransposeMatrixfARB = (void(*)(const GLfloat *m)) SDL_GL_GetProcAddress( "glLoadTransposeMatrixfARB");
		DYN_glLockArraysEXT = (void(*)(GLint first, GLsizei count)) SDL_GL_GetProcAddress( "glLockArraysEXT");
		DYN_glLogicOp = (void(*)(GLenum opcode)) SDL_GL_GetProcAddress( "glLogicOp");
		DYN_glMap1d = (void(*)(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points)) SDL_GL_GetProcAddress( "glMap1d");
		DYN_glMap1f = (void(*)(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points)) SDL_GL_GetProcAddress( "glMap1f");
		DYN_glMap2d = (void(*)(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points)) SDL_GL_GetProcAddress( "glMap2d");
		DYN_glMap2f = (void(*)(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points)) SDL_GL_GetProcAddress( "glMap2f");
		DYN_glMapBufferARB = (GLvoid*(*)(GLenum target, GLenum access)) SDL_GL_GetProcAddress( "glMapBufferARB");
		DYN_glMapGrid1d = (void(*)(GLint un, GLdouble u1, GLdouble u2)) SDL_GL_GetProcAddress( "glMapGrid1d");
		DYN_glMapGrid1f = (void(*)(GLint un, GLfloat u1, GLfloat u2)) SDL_GL_GetProcAddress( "glMapGrid1f");
		DYN_glMapGrid2d = (void(*)(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2)) SDL_GL_GetProcAddress( "glMapGrid2d");
		DYN_glMapGrid2f = (void(*)(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2)) SDL_GL_GetProcAddress( "glMapGrid2f");
		DYN_glMaterialf = (void(*)(GLenum face, GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glMaterialf");
		DYN_glMaterialfv = (void(*)(GLenum face, GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glMaterialfv");
		DYN_glMateriali = (void(*)(GLenum face, GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glMateriali");
		DYN_glMaterialiv = (void(*)(GLenum face, GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glMaterialiv");
		DYN_glMatrixMode = (void(*)(GLenum mode)) SDL_GL_GetProcAddress( "glMatrixMode");
		DYN_glMinmax = (void(*)(GLenum target, GLenum internalformat, GLboolean sink)) SDL_GL_GetProcAddress( "glMinmax");
		DYN_glMultMatrixd = (void(*)(const GLdouble *m)) SDL_GL_GetProcAddress( "glMultMatrixd");
		DYN_glMultMatrixf = (void(*)(const GLfloat *m)) SDL_GL_GetProcAddress( "glMultMatrixf");
		DYN_glMultTransposeMatrixd = (void(*)(const GLdouble *m)) SDL_GL_GetProcAddress( "glMultTransposeMatrixd");
		DYN_glMultTransposeMatrixdARB = (void(*)(const GLdouble *m)) SDL_GL_GetProcAddress( "glMultTransposeMatrixdARB");
		DYN_glMultTransposeMatrixf = (void(*)(const GLfloat *m)) SDL_GL_GetProcAddress( "glMultTransposeMatrixf");
		DYN_glMultTransposeMatrixfARB = (void(*)(const GLfloat *m)) SDL_GL_GetProcAddress( "glMultTransposeMatrixfARB");
		DYN_glMultiDrawArrays = (void(*)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)) SDL_GL_GetProcAddress( "glMultiDrawArrays");
		DYN_glMultiDrawArraysEXT = (void(*)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)) SDL_GL_GetProcAddress( "glMultiDrawArraysEXT");
		DYN_glMultiDrawElements = (void(*)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount)) SDL_GL_GetProcAddress( "glMultiDrawElements");
		DYN_glMultiDrawElementsEXT = (void(*)(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount)) SDL_GL_GetProcAddress( "glMultiDrawElementsEXT");
		DYN_glMultiTexCoord1d = (void(*)(GLenum target, GLdouble s)) SDL_GL_GetProcAddress( "glMultiTexCoord1d");
		DYN_glMultiTexCoord1dARB = (void(*)(GLenum target, GLdouble s)) SDL_GL_GetProcAddress( "glMultiTexCoord1dARB");
		DYN_glMultiTexCoord1dSGIS = (void(*)(GLenum target, GLdouble s)) SDL_GL_GetProcAddress( "glMultiTexCoord1dSGIS");
		DYN_glMultiTexCoord1dv = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1dv");
		DYN_glMultiTexCoord1dvARB = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1dvARB");
		DYN_glMultiTexCoord1dvSGIS = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1dvSGIS");
		DYN_glMultiTexCoord1f = (void(*)(GLenum target, GLfloat s)) SDL_GL_GetProcAddress( "glMultiTexCoord1f");
		DYN_glMultiTexCoord1fARB = (void(*)(GLenum target, GLfloat s)) SDL_GL_GetProcAddress( "glMultiTexCoord1fARB");
		DYN_glMultiTexCoord1fSGIS = (void(*)(GLenum target, GLfloat s)) SDL_GL_GetProcAddress( "glMultiTexCoord1fSGIS");
		DYN_glMultiTexCoord1fv = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1fv");
		DYN_glMultiTexCoord1fvARB = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1fvARB");
		DYN_glMultiTexCoord1fvSGIS = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1fvSGIS");
		DYN_glMultiTexCoord1hNV = (void(*)(GLenum target, GLhalf s)) SDL_GL_GetProcAddress( "glMultiTexCoord1hNV");
		DYN_glMultiTexCoord1hvNV = (void(*)(GLenum target, const GLhalf *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1hvNV");
		DYN_glMultiTexCoord1i = (void(*)(GLenum target, GLint s)) SDL_GL_GetProcAddress( "glMultiTexCoord1i");
		DYN_glMultiTexCoord1iARB = (void(*)(GLenum target, GLint s)) SDL_GL_GetProcAddress( "glMultiTexCoord1iARB");
		DYN_glMultiTexCoord1iSGIS = (void(*)(GLenum target, GLint s)) SDL_GL_GetProcAddress( "glMultiTexCoord1iSGIS");
		DYN_glMultiTexCoord1iv = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1iv");
		DYN_glMultiTexCoord1ivARB = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1ivARB");
		DYN_glMultiTexCoord1ivSGIS = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1ivSGIS");
		DYN_glMultiTexCoord1s = (void(*)(GLenum target, GLshort s)) SDL_GL_GetProcAddress( "glMultiTexCoord1s");
		DYN_glMultiTexCoord1sARB = (void(*)(GLenum target, GLshort s)) SDL_GL_GetProcAddress( "glMultiTexCoord1sARB");
		DYN_glMultiTexCoord1sSGIS = (void(*)(GLenum target, GLshort s)) SDL_GL_GetProcAddress( "glMultiTexCoord1sSGIS");
		DYN_glMultiTexCoord1sv = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1sv");
		DYN_glMultiTexCoord1svARB = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1svARB");
		DYN_glMultiTexCoord1svSGIS = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord1svSGIS");
		DYN_glMultiTexCoord2d = (void(*)(GLenum target, GLdouble s, GLdouble t)) SDL_GL_GetProcAddress( "glMultiTexCoord2d");
		DYN_glMultiTexCoord2dARB = (void(*)(GLenum target, GLdouble s, GLdouble t)) SDL_GL_GetProcAddress( "glMultiTexCoord2dARB");
		DYN_glMultiTexCoord2dSGIS = (void(*)(GLenum target, GLdouble s, GLdouble t)) SDL_GL_GetProcAddress( "glMultiTexCoord2dSGIS");
		DYN_glMultiTexCoord2dv = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2dv");
		DYN_glMultiTexCoord2dvARB = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2dvARB");
		DYN_glMultiTexCoord2dvSGIS = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2dvSGIS");
		DYN_glMultiTexCoord2f = (void(*)(GLenum target, GLfloat s, GLfloat t)) SDL_GL_GetProcAddress( "glMultiTexCoord2f");
		DYN_glMultiTexCoord2fARB = (void(*)(GLenum target, GLfloat s, GLfloat t)) SDL_GL_GetProcAddress( "glMultiTexCoord2fARB");
		DYN_glMultiTexCoord2fSGIS = (void(*)(GLenum target, GLfloat s, GLfloat t)) SDL_GL_GetProcAddress( "glMultiTexCoord2fSGIS");
		DYN_glMultiTexCoord2fv = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2fv");
		DYN_glMultiTexCoord2fvARB = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2fvARB");
		DYN_glMultiTexCoord2fvSGIS = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2fvSGIS");
		DYN_glMultiTexCoord2hNV = (void(*)(GLenum target, GLhalf s, GLhalf t)) SDL_GL_GetProcAddress( "glMultiTexCoord2hNV");
		DYN_glMultiTexCoord2hvNV = (void(*)(GLenum target, const GLhalf *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2hvNV");
		DYN_glMultiTexCoord2i = (void(*)(GLenum target, GLint s, GLint t)) SDL_GL_GetProcAddress( "glMultiTexCoord2i");
		DYN_glMultiTexCoord2iARB = (void(*)(GLenum target, GLint s, GLint t)) SDL_GL_GetProcAddress( "glMultiTexCoord2iARB");
		DYN_glMultiTexCoord2iSGIS = (void(*)(GLenum target, GLint s, GLint t)) SDL_GL_GetProcAddress( "glMultiTexCoord2iSGIS");
		DYN_glMultiTexCoord2iv = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2iv");
		DYN_glMultiTexCoord2ivARB = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2ivARB");
		DYN_glMultiTexCoord2ivSGIS = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2ivSGIS");
		DYN_glMultiTexCoord2s = (void(*)(GLenum target, GLshort s, GLshort t)) SDL_GL_GetProcAddress( "glMultiTexCoord2s");
		DYN_glMultiTexCoord2sARB = (void(*)(GLenum target, GLshort s, GLshort t)) SDL_GL_GetProcAddress( "glMultiTexCoord2sARB");
		DYN_glMultiTexCoord2sSGIS = (void(*)(GLenum target, GLshort s, GLshort t)) SDL_GL_GetProcAddress( "glMultiTexCoord2sSGIS");
		DYN_glMultiTexCoord2sv = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2sv");
		DYN_glMultiTexCoord2svARB = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2svARB");
		DYN_glMultiTexCoord2svSGIS = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord2svSGIS");
		DYN_glMultiTexCoord3d = (void(*)(GLenum target, GLdouble s, GLdouble t, GLdouble r)) SDL_GL_GetProcAddress( "glMultiTexCoord3d");
		DYN_glMultiTexCoord3dARB = (void(*)(GLenum target, GLdouble s, GLdouble t, GLdouble r)) SDL_GL_GetProcAddress( "glMultiTexCoord3dARB");
		DYN_glMultiTexCoord3dSGIS = (void(*)(GLenum target, GLdouble s, GLdouble t, GLdouble r)) SDL_GL_GetProcAddress( "glMultiTexCoord3dSGIS");
		DYN_glMultiTexCoord3dv = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3dv");
		DYN_glMultiTexCoord3dvARB = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3dvARB");
		DYN_glMultiTexCoord3dvSGIS = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3dvSGIS");
		DYN_glMultiTexCoord3f = (void(*)(GLenum target, GLfloat s, GLfloat t, GLfloat r)) SDL_GL_GetProcAddress( "glMultiTexCoord3f");
		DYN_glMultiTexCoord3fARB = (void(*)(GLenum target, GLfloat s, GLfloat t, GLfloat r)) SDL_GL_GetProcAddress( "glMultiTexCoord3fARB");
		DYN_glMultiTexCoord3fSGIS = (void(*)(GLenum target, GLfloat s, GLfloat t, GLfloat r)) SDL_GL_GetProcAddress( "glMultiTexCoord3fSGIS");
		DYN_glMultiTexCoord3fv = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3fv");
		DYN_glMultiTexCoord3fvARB = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3fvARB");
		DYN_glMultiTexCoord3fvSGIS = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3fvSGIS");
		DYN_glMultiTexCoord3hNV = (void(*)(GLenum target, GLhalf s, GLhalf t, GLhalf r)) SDL_GL_GetProcAddress( "glMultiTexCoord3hNV");
		DYN_glMultiTexCoord3hvNV = (void(*)(GLenum target, const GLhalf *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3hvNV");
		DYN_glMultiTexCoord3i = (void(*)(GLenum target, GLint s, GLint t, GLint r)) SDL_GL_GetProcAddress( "glMultiTexCoord3i");
		DYN_glMultiTexCoord3iARB = (void(*)(GLenum target, GLint s, GLint t, GLint r)) SDL_GL_GetProcAddress( "glMultiTexCoord3iARB");
		DYN_glMultiTexCoord3iSGIS = (void(*)(GLenum target, GLint s, GLint t, GLint r)) SDL_GL_GetProcAddress( "glMultiTexCoord3iSGIS");
		DYN_glMultiTexCoord3iv = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3iv");
		DYN_glMultiTexCoord3ivARB = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3ivARB");
		DYN_glMultiTexCoord3ivSGIS = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3ivSGIS");
		DYN_glMultiTexCoord3s = (void(*)(GLenum target, GLshort s, GLshort t, GLshort r)) SDL_GL_GetProcAddress( "glMultiTexCoord3s");
		DYN_glMultiTexCoord3sARB = (void(*)(GLenum target, GLshort s, GLshort t, GLshort r)) SDL_GL_GetProcAddress( "glMultiTexCoord3sARB");
		DYN_glMultiTexCoord3sSGIS = (void(*)(GLenum target, GLshort s, GLshort t, GLshort r)) SDL_GL_GetProcAddress( "glMultiTexCoord3sSGIS");
		DYN_glMultiTexCoord3sv = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3sv");
		DYN_glMultiTexCoord3svARB = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3svARB");
		DYN_glMultiTexCoord3svSGIS = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord3svSGIS");
		DYN_glMultiTexCoord4d = (void(*)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)) SDL_GL_GetProcAddress( "glMultiTexCoord4d");
		DYN_glMultiTexCoord4dARB = (void(*)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)) SDL_GL_GetProcAddress( "glMultiTexCoord4dARB");
		DYN_glMultiTexCoord4dSGIS = (void(*)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)) SDL_GL_GetProcAddress( "glMultiTexCoord4dSGIS");
		DYN_glMultiTexCoord4dv = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4dv");
		DYN_glMultiTexCoord4dvARB = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4dvARB");
		DYN_glMultiTexCoord4dvSGIS = (void(*)(GLenum target, const GLdouble *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4dvSGIS");
		DYN_glMultiTexCoord4f = (void(*)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)) SDL_GL_GetProcAddress( "glMultiTexCoord4f");
		DYN_glMultiTexCoord4fARB = (void(*)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)) SDL_GL_GetProcAddress( "glMultiTexCoord4fARB");
		DYN_glMultiTexCoord4fSGIS = (void(*)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)) SDL_GL_GetProcAddress( "glMultiTexCoord4fSGIS");
		DYN_glMultiTexCoord4fv = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4fv");
		DYN_glMultiTexCoord4fvARB = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4fvARB");
		DYN_glMultiTexCoord4fvSGIS = (void(*)(GLenum target, const GLfloat *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4fvSGIS");
		DYN_glMultiTexCoord4hNV = (void(*)(GLenum target, GLhalf s, GLhalf t, GLhalf r, GLhalf q)) SDL_GL_GetProcAddress( "glMultiTexCoord4hNV");
		DYN_glMultiTexCoord4hvNV = (void(*)(GLenum target, const GLhalf *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4hvNV");
		DYN_glMultiTexCoord4i = (void(*)(GLenum target, GLint s, GLint t, GLint r, GLint q)) SDL_GL_GetProcAddress( "glMultiTexCoord4i");
		DYN_glMultiTexCoord4iARB = (void(*)(GLenum target, GLint s, GLint t, GLint r, GLint q)) SDL_GL_GetProcAddress( "glMultiTexCoord4iARB");
		DYN_glMultiTexCoord4iSGIS = (void(*)(GLenum target, GLint s, GLint t, GLint r, GLint q)) SDL_GL_GetProcAddress( "glMultiTexCoord4iSGIS");
		DYN_glMultiTexCoord4iv = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4iv");
		DYN_glMultiTexCoord4ivARB = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4ivARB");
		DYN_glMultiTexCoord4ivSGIS = (void(*)(GLenum target, const GLint *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4ivSGIS");
		DYN_glMultiTexCoord4s = (void(*)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)) SDL_GL_GetProcAddress( "glMultiTexCoord4s");
		DYN_glMultiTexCoord4sARB = (void(*)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)) SDL_GL_GetProcAddress( "glMultiTexCoord4sARB");
		DYN_glMultiTexCoord4sSGIS = (void(*)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)) SDL_GL_GetProcAddress( "glMultiTexCoord4sSGIS");
		DYN_glMultiTexCoord4sv = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4sv");
		DYN_glMultiTexCoord4svARB = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4svARB");
		DYN_glMultiTexCoord4svSGIS = (void(*)(GLenum target, const GLshort *v)) SDL_GL_GetProcAddress( "glMultiTexCoord4svSGIS");
		DYN_glMultiTexCoordPointerSGIS = (void(*)(GLenum target, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glMultiTexCoordPointerSGIS");
		DYN_glNewList = (void(*)(GLuint list, GLenum mode)) SDL_GL_GetProcAddress( "glNewList");
		DYN_glNormal3b = (void(*)(GLbyte nx, GLbyte ny, GLbyte nz)) SDL_GL_GetProcAddress( "glNormal3b");
		DYN_glNormal3bv = (void(*)(const GLbyte *v)) SDL_GL_GetProcAddress( "glNormal3bv");
		DYN_glNormal3d = (void(*)(GLdouble nx, GLdouble ny, GLdouble nz)) SDL_GL_GetProcAddress( "glNormal3d");
		DYN_glNormal3dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glNormal3dv");
		DYN_glNormal3f = (void(*)(GLfloat nx, GLfloat ny, GLfloat nz)) SDL_GL_GetProcAddress( "glNormal3f");
		DYN_glNormal3fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glNormal3fv");
		DYN_glNormal3hNV = (void(*)(GLhalf nx, GLhalf ny, GLhalf nz)) SDL_GL_GetProcAddress( "glNormal3hNV");
		DYN_glNormal3hvNV = (void(*)(const GLhalf *v)) SDL_GL_GetProcAddress( "glNormal3hvNV");
		DYN_glNormal3i = (void(*)(GLint nx, GLint ny, GLint nz)) SDL_GL_GetProcAddress( "glNormal3i");
		DYN_glNormal3iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glNormal3iv");
		DYN_glNormal3s = (void(*)(GLshort nx, GLshort ny, GLshort nz)) SDL_GL_GetProcAddress( "glNormal3s");
		DYN_glNormal3sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glNormal3sv");
		DYN_glNormalPointer = (void(*)(GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glNormalPointer");
		DYN_glNormalPointerEXT = (void(*)(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glNormalPointerEXT");
		DYN_glOrtho = (void(*)(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar)) SDL_GL_GetProcAddress( "glOrtho");
		DYN_glPassThrough = (void(*)(GLfloat token)) SDL_GL_GetProcAddress( "glPassThrough");
		DYN_glPixelDataRangeNV = (void(*)(GLenum target, GLsizei size, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glPixelDataRangeNV");
		DYN_glPixelMapfv = (void(*)(GLenum map, GLint mapsize, const GLfloat *values)) SDL_GL_GetProcAddress( "glPixelMapfv");
		DYN_glPixelMapuiv = (void(*)(GLenum map, GLint mapsize, const GLuint *values)) SDL_GL_GetProcAddress( "glPixelMapuiv");
		DYN_glPixelMapusv = (void(*)(GLenum map, GLint mapsize, const GLushort *values)) SDL_GL_GetProcAddress( "glPixelMapusv");
		DYN_glPixelStoref = (void(*)(GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glPixelStoref");
		DYN_glPixelStorei = (void(*)(GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glPixelStorei");
		DYN_glPixelTransferf = (void(*)(GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glPixelTransferf");
		DYN_glPixelTransferi = (void(*)(GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glPixelTransferi");
		DYN_glPixelZoom = (void(*)(GLfloat xfactor, GLfloat yfactor)) SDL_GL_GetProcAddress( "glPixelZoom");
		DYN_glPointParameterf = (void(*)(GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glPointParameterf");
		DYN_glPointParameterfARB = (void(*)(GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glPointParameterfARB");
		DYN_glPointParameterfEXT = (void(*)(GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glPointParameterfEXT");
		DYN_glPointParameterfv = (void(*)(GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glPointParameterfv");
		DYN_glPointParameterfvARB = (void(*)(GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glPointParameterfvARB");
		DYN_glPointParameterfvEXT = (void(*)(GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glPointParameterfvEXT");
		DYN_glPointParameteri = (void(*)(GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glPointParameteri");
		DYN_glPointParameteriNV = (void(*)(GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glPointParameteriNV");
		DYN_glPointParameteriv = (void(*)(GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glPointParameteriv");
		DYN_glPointParameterivNV = (void(*)(GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glPointParameterivNV");
		DYN_glPointSize = (void(*)(GLfloat size)) SDL_GL_GetProcAddress( "glPointSize");
		DYN_glPolygonMode = (void(*)(GLenum face, GLenum mode)) SDL_GL_GetProcAddress( "glPolygonMode");
		DYN_glPolygonOffset = (void(*)(GLfloat factor, GLfloat units)) SDL_GL_GetProcAddress( "glPolygonOffset");
		DYN_glPolygonStipple = (void(*)(const GLubyte *mask)) SDL_GL_GetProcAddress( "glPolygonStipple");
		DYN_glPopAttrib = (void(*)(void)) SDL_GL_GetProcAddress( "glPopAttrib");
		DYN_glPopClientAttrib = (void(*)(void)) SDL_GL_GetProcAddress( "glPopClientAttrib");
		DYN_glPopMatrix = (void(*)(void)) SDL_GL_GetProcAddress( "glPopMatrix");
		DYN_glPopName = (void(*)(void)) SDL_GL_GetProcAddress( "glPopName");
		DYN_glPrimitiveRestartIndexNV = (void(*)(GLuint index)) SDL_GL_GetProcAddress( "glPrimitiveRestartIndexNV");
		DYN_glPrimitiveRestartNV = (void(*)(void)) SDL_GL_GetProcAddress( "glPrimitiveRestartNV");
		DYN_glPrioritizeTextures = (void(*)(GLsizei n, const GLuint *textures, const GLclampf *priorities)) SDL_GL_GetProcAddress( "glPrioritizeTextures");
		DYN_glPrioritizeTexturesEXT = (void(*)(GLsizei n, const GLuint *textures, const GLclampf *priorities)) SDL_GL_GetProcAddress( "glPrioritizeTexturesEXT");
		DYN_glProgramEnvParameter4dARB = (void(*)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) SDL_GL_GetProcAddress( "glProgramEnvParameter4dARB");
		DYN_glProgramEnvParameter4dvARB = (void(*)(GLenum target, GLuint index, const GLdouble *params)) SDL_GL_GetProcAddress( "glProgramEnvParameter4dvARB");
		DYN_glProgramEnvParameter4fARB = (void(*)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) SDL_GL_GetProcAddress( "glProgramEnvParameter4fARB");
		DYN_glProgramEnvParameter4fvARB = (void(*)(GLenum target, GLuint index, const GLfloat *params)) SDL_GL_GetProcAddress( "glProgramEnvParameter4fvARB");
		DYN_glProgramLocalParameter4dARB = (void(*)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) SDL_GL_GetProcAddress( "glProgramLocalParameter4dARB");
		DYN_glProgramLocalParameter4dvARB = (void(*)(GLenum target, GLuint index, const GLdouble *params)) SDL_GL_GetProcAddress( "glProgramLocalParameter4dvARB");
		DYN_glProgramLocalParameter4fARB = (void(*)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) SDL_GL_GetProcAddress( "glProgramLocalParameter4fARB");
		DYN_glProgramLocalParameter4fvARB = (void(*)(GLenum target, GLuint index, const GLfloat *params)) SDL_GL_GetProcAddress( "glProgramLocalParameter4fvARB");
		DYN_glProgramNamedParameter4dNV = (void(*)(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) SDL_GL_GetProcAddress( "glProgramNamedParameter4dNV");
		DYN_glProgramNamedParameter4dvNV = (void(*)(GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v)) SDL_GL_GetProcAddress( "glProgramNamedParameter4dvNV");
		DYN_glProgramNamedParameter4fNV = (void(*)(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) SDL_GL_GetProcAddress( "glProgramNamedParameter4fNV");
		DYN_glProgramNamedParameter4fvNV = (void(*)(GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v)) SDL_GL_GetProcAddress( "glProgramNamedParameter4fvNV");
		DYN_glProgramParameter4dNV = (void(*)(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) SDL_GL_GetProcAddress( "glProgramParameter4dNV");
		DYN_glProgramParameter4dvNV = (void(*)(GLenum target, GLuint index, const GLdouble *v)) SDL_GL_GetProcAddress( "glProgramParameter4dvNV");
		DYN_glProgramParameter4fNV = (void(*)(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) SDL_GL_GetProcAddress( "glProgramParameter4fNV");
		DYN_glProgramParameter4fvNV = (void(*)(GLenum target, GLuint index, const GLfloat *v)) SDL_GL_GetProcAddress( "glProgramParameter4fvNV");
		DYN_glProgramParameters4dvNV = (void(*)(GLenum target, GLuint index, GLsizei count, const GLdouble *v)) SDL_GL_GetProcAddress( "glProgramParameters4dvNV");
		DYN_glProgramParameters4fvNV = (void(*)(GLenum target, GLuint index, GLsizei count, const GLfloat *v)) SDL_GL_GetProcAddress( "glProgramParameters4fvNV");
		DYN_glProgramStringARB = (void(*)(GLenum target, GLenum format, GLsizei len, const GLvoid *string)) SDL_GL_GetProcAddress( "glProgramStringARB");
		DYN_glPushAttrib = (void(*)(GLbitfield mask)) SDL_GL_GetProcAddress( "glPushAttrib");
		DYN_glPushClientAttrib = (void(*)(GLbitfield mask)) SDL_GL_GetProcAddress( "glPushClientAttrib");
		DYN_glPushMatrix = (void(*)(void)) SDL_GL_GetProcAddress( "glPushMatrix");
		DYN_glPushName = (void(*)(GLuint name)) SDL_GL_GetProcAddress( "glPushName");
		DYN_glRasterPos2d = (void(*)(GLdouble x, GLdouble y)) SDL_GL_GetProcAddress( "glRasterPos2d");
		DYN_glRasterPos2dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glRasterPos2dv");
		DYN_glRasterPos2f = (void(*)(GLfloat x, GLfloat y)) SDL_GL_GetProcAddress( "glRasterPos2f");
		DYN_glRasterPos2fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glRasterPos2fv");
		DYN_glRasterPos2i = (void(*)(GLint x, GLint y)) SDL_GL_GetProcAddress( "glRasterPos2i");
		DYN_glRasterPos2iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glRasterPos2iv");
		DYN_glRasterPos2s = (void(*)(GLshort x, GLshort y)) SDL_GL_GetProcAddress( "glRasterPos2s");
		DYN_glRasterPos2sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glRasterPos2sv");
		DYN_glRasterPos3d = (void(*)(GLdouble x, GLdouble y, GLdouble z)) SDL_GL_GetProcAddress( "glRasterPos3d");
		DYN_glRasterPos3dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glRasterPos3dv");
		DYN_glRasterPos3f = (void(*)(GLfloat x, GLfloat y, GLfloat z)) SDL_GL_GetProcAddress( "glRasterPos3f");
		DYN_glRasterPos3fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glRasterPos3fv");
		DYN_glRasterPos3i = (void(*)(GLint x, GLint y, GLint z)) SDL_GL_GetProcAddress( "glRasterPos3i");
		DYN_glRasterPos3iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glRasterPos3iv");
		DYN_glRasterPos3s = (void(*)(GLshort x, GLshort y, GLshort z)) SDL_GL_GetProcAddress( "glRasterPos3s");
		DYN_glRasterPos3sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glRasterPos3sv");
		DYN_glRasterPos4d = (void(*)(GLdouble x, GLdouble y, GLdouble z, GLdouble w)) SDL_GL_GetProcAddress( "glRasterPos4d");
		DYN_glRasterPos4dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glRasterPos4dv");
		DYN_glRasterPos4f = (void(*)(GLfloat x, GLfloat y, GLfloat z, GLfloat w)) SDL_GL_GetProcAddress( "glRasterPos4f");
		DYN_glRasterPos4fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glRasterPos4fv");
		DYN_glRasterPos4i = (void(*)(GLint x, GLint y, GLint z, GLint w)) SDL_GL_GetProcAddress( "glRasterPos4i");
		DYN_glRasterPos4iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glRasterPos4iv");
		DYN_glRasterPos4s = (void(*)(GLshort x, GLshort y, GLshort z, GLshort w)) SDL_GL_GetProcAddress( "glRasterPos4s");
		DYN_glRasterPos4sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glRasterPos4sv");
		DYN_glReadBuffer = (void(*)(GLenum mode)) SDL_GL_GetProcAddress( "glReadBuffer");
		DYN_glReadPixels = (void(*)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)) SDL_GL_GetProcAddress( "glReadPixels");
		DYN_glRectd = (void(*)(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2)) SDL_GL_GetProcAddress( "glRectd");
		DYN_glRectdv = (void(*)(const GLdouble *v1, const GLdouble *v2)) SDL_GL_GetProcAddress( "glRectdv");
		DYN_glRectf = (void(*)(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2)) SDL_GL_GetProcAddress( "glRectf");
		DYN_glRectfv = (void(*)(const GLfloat *v1, const GLfloat *v2)) SDL_GL_GetProcAddress( "glRectfv");
		DYN_glRecti = (void(*)(GLint x1, GLint y1, GLint x2, GLint y2)) SDL_GL_GetProcAddress( "glRecti");
		DYN_glRectiv = (void(*)(const GLint *v1, const GLint *v2)) SDL_GL_GetProcAddress( "glRectiv");
		DYN_glRects = (void(*)(GLshort x1, GLshort y1, GLshort x2, GLshort y2)) SDL_GL_GetProcAddress( "glRects");
		DYN_glRectsv = (void(*)(const GLshort *v1, const GLshort *v2)) SDL_GL_GetProcAddress( "glRectsv");
		DYN_glReleaseFlushHold = (GLenum(*)(GLuint id)) SDL_GL_GetProcAddress( "glReleaseFlushHold");
		DYN_glRenderMode = (GLint(*)(GLenum mode)) SDL_GL_GetProcAddress( "glRenderMode");
		DYN_glRequestResidentProgramsNV = (void(*)(GLsizei n, const GLuint *programs)) SDL_GL_GetProcAddress( "glRequestResidentProgramsNV");
		DYN_glResetHistogram = (void(*)(GLenum target)) SDL_GL_GetProcAddress( "glResetHistogram");
		DYN_glResetMinmax = (void(*)(GLenum target)) SDL_GL_GetProcAddress( "glResetMinmax");
		DYN_glRotated = (void(*)(GLdouble angle, GLdouble x, GLdouble y, GLdouble z)) SDL_GL_GetProcAddress( "glRotated");
		DYN_glRotatef = (void(*)(GLfloat angle, GLfloat x, GLfloat y, GLfloat z)) SDL_GL_GetProcAddress( "glRotatef");
		DYN_glSampleCoverage = (void(*)(GLclampf value, GLboolean invert)) SDL_GL_GetProcAddress( "glSampleCoverage");
		DYN_glSampleCoverageARB = (void(*)(GLclampf value, GLboolean invert)) SDL_GL_GetProcAddress( "glSampleCoverageARB");
		DYN_glScaled = (void(*)(GLdouble x, GLdouble y, GLdouble z)) SDL_GL_GetProcAddress( "glScaled");
		DYN_glScalef = (void(*)(GLfloat x, GLfloat y, GLfloat z)) SDL_GL_GetProcAddress( "glScalef");
		DYN_glScissor = (void(*)(GLint x, GLint y, GLsizei width, GLsizei height)) SDL_GL_GetProcAddress( "glScissor");
		DYN_glSecondaryColor3b = (void(*)(GLbyte red, GLbyte green, GLbyte blue)) SDL_GL_GetProcAddress( "glSecondaryColor3b");
		DYN_glSecondaryColor3bEXT = (void(*)(GLbyte red, GLbyte green, GLbyte blue)) SDL_GL_GetProcAddress( "glSecondaryColor3bEXT");
		DYN_glSecondaryColor3bv = (void(*)(const GLbyte *v)) SDL_GL_GetProcAddress( "glSecondaryColor3bv");
		DYN_glSecondaryColor3bvEXT = (void(*)(const GLbyte *v)) SDL_GL_GetProcAddress( "glSecondaryColor3bvEXT");
		DYN_glSecondaryColor3d = (void(*)(GLdouble red, GLdouble green, GLdouble blue)) SDL_GL_GetProcAddress( "glSecondaryColor3d");
		DYN_glSecondaryColor3dEXT = (void(*)(GLdouble red, GLdouble green, GLdouble blue)) SDL_GL_GetProcAddress( "glSecondaryColor3dEXT");
		DYN_glSecondaryColor3dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glSecondaryColor3dv");
		DYN_glSecondaryColor3dvEXT = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glSecondaryColor3dvEXT");
		DYN_glSecondaryColor3f = (void(*)(GLfloat red, GLfloat green, GLfloat blue)) SDL_GL_GetProcAddress( "glSecondaryColor3f");
		DYN_glSecondaryColor3fEXT = (void(*)(GLfloat red, GLfloat green, GLfloat blue)) SDL_GL_GetProcAddress( "glSecondaryColor3fEXT");
		DYN_glSecondaryColor3fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glSecondaryColor3fv");
		DYN_glSecondaryColor3fvEXT = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glSecondaryColor3fvEXT");
		DYN_glSecondaryColor3hNV = (void(*)(GLhalf red, GLhalf green, GLhalf blue)) SDL_GL_GetProcAddress( "glSecondaryColor3hNV");
		DYN_glSecondaryColor3hvNV = (void(*)(const GLhalf *v)) SDL_GL_GetProcAddress( "glSecondaryColor3hvNV");
		DYN_glSecondaryColor3i = (void(*)(GLint red, GLint green, GLint blue)) SDL_GL_GetProcAddress( "glSecondaryColor3i");
		DYN_glSecondaryColor3iEXT = (void(*)(GLint red, GLint green, GLint blue)) SDL_GL_GetProcAddress( "glSecondaryColor3iEXT");
		DYN_glSecondaryColor3iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glSecondaryColor3iv");
		DYN_glSecondaryColor3ivEXT = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glSecondaryColor3ivEXT");
		DYN_glSecondaryColor3s = (void(*)(GLshort red, GLshort green, GLshort blue)) SDL_GL_GetProcAddress( "glSecondaryColor3s");
		DYN_glSecondaryColor3sEXT = (void(*)(GLshort red, GLshort green, GLshort blue)) SDL_GL_GetProcAddress( "glSecondaryColor3sEXT");
		DYN_glSecondaryColor3sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glSecondaryColor3sv");
		DYN_glSecondaryColor3svEXT = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glSecondaryColor3svEXT");
		DYN_glSecondaryColor3ub = (void(*)(GLubyte red, GLubyte green, GLubyte blue)) SDL_GL_GetProcAddress( "glSecondaryColor3ub");
		DYN_glSecondaryColor3ubEXT = (void(*)(GLubyte red, GLubyte green, GLubyte blue)) SDL_GL_GetProcAddress( "glSecondaryColor3ubEXT");
		DYN_glSecondaryColor3ubv = (void(*)(const GLubyte *v)) SDL_GL_GetProcAddress( "glSecondaryColor3ubv");
		DYN_glSecondaryColor3ubvEXT = (void(*)(const GLubyte *v)) SDL_GL_GetProcAddress( "glSecondaryColor3ubvEXT");
		DYN_glSecondaryColor3ui = (void(*)(GLuint red, GLuint green, GLuint blue)) SDL_GL_GetProcAddress( "glSecondaryColor3ui");
		DYN_glSecondaryColor3uiEXT = (void(*)(GLuint red, GLuint green, GLuint blue)) SDL_GL_GetProcAddress( "glSecondaryColor3uiEXT");
		DYN_glSecondaryColor3uiv = (void(*)(const GLuint *v)) SDL_GL_GetProcAddress( "glSecondaryColor3uiv");
		DYN_glSecondaryColor3uivEXT = (void(*)(const GLuint *v)) SDL_GL_GetProcAddress( "glSecondaryColor3uivEXT");
		DYN_glSecondaryColor3us = (void(*)(GLushort red, GLushort green, GLushort blue)) SDL_GL_GetProcAddress( "glSecondaryColor3us");
		DYN_glSecondaryColor3usEXT = (void(*)(GLushort red, GLushort green, GLushort blue)) SDL_GL_GetProcAddress( "glSecondaryColor3usEXT");
		DYN_glSecondaryColor3usv = (void(*)(const GLushort *v)) SDL_GL_GetProcAddress( "glSecondaryColor3usv");
		DYN_glSecondaryColor3usvEXT = (void(*)(const GLushort *v)) SDL_GL_GetProcAddress( "glSecondaryColor3usvEXT");
		DYN_glSecondaryColorPointer = (void(*)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glSecondaryColorPointer");
		DYN_glSecondaryColorPointerEXT = (void(*)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glSecondaryColorPointerEXT");
		DYN_glSelectBuffer = (void(*)(GLsizei size, GLuint *buffer)) SDL_GL_GetProcAddress( "glSelectBuffer");
		DYN_glSelectTextureCoordSetSGIS = (void(*)(GLenum target)) SDL_GL_GetProcAddress( "glSelectTextureCoordSetSGIS");
		DYN_glSelectTextureSGIS = (void(*)(GLenum target)) SDL_GL_GetProcAddress( "glSelectTextureSGIS");
		DYN_glSeparableFilter2D = (void(*)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)) SDL_GL_GetProcAddress( "glSeparableFilter2D");
		DYN_glSetFenceNV = (void(*)(GLuint fence, GLenum condition)) SDL_GL_GetProcAddress( "glSetFenceNV");
		DYN_glSetWindowStereoModeNV = (void(*)(GLboolean displayMode)) SDL_GL_GetProcAddress( "glSetWindowStereoModeNV");
		DYN_glShadeModel = (void(*)(GLenum mode)) SDL_GL_GetProcAddress( "glShadeModel");
		DYN_glStencilFunc = (void(*)(GLenum func, GLint ref, GLuint mask)) SDL_GL_GetProcAddress( "glStencilFunc");
		DYN_glStencilMask = (void(*)(GLuint mask)) SDL_GL_GetProcAddress( "glStencilMask");
		DYN_glStencilOp = (void(*)(GLenum fail, GLenum zfail, GLenum zpass)) SDL_GL_GetProcAddress( "glStencilOp");
		DYN_glTbufferMask3DFX = (void(*)(GLuint mask)) SDL_GL_GetProcAddress( "glTbufferMask3DFX");
		DYN_glTestFenceNV = (GLboolean(*)(GLuint fence)) SDL_GL_GetProcAddress( "glTestFenceNV");
		DYN_glTexCoord1d = (void(*)(GLdouble s)) SDL_GL_GetProcAddress( "glTexCoord1d");
		DYN_glTexCoord1dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glTexCoord1dv");
		DYN_glTexCoord1f = (void(*)(GLfloat s)) SDL_GL_GetProcAddress( "glTexCoord1f");
		DYN_glTexCoord1fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glTexCoord1fv");
		DYN_glTexCoord1hNV = (void(*)(GLhalf s)) SDL_GL_GetProcAddress( "glTexCoord1hNV");
		DYN_glTexCoord1hvNV = (void(*)(const GLhalf *v)) SDL_GL_GetProcAddress( "glTexCoord1hvNV");
		DYN_glTexCoord1i = (void(*)(GLint s)) SDL_GL_GetProcAddress( "glTexCoord1i");
		DYN_glTexCoord1iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glTexCoord1iv");
		DYN_glTexCoord1s = (void(*)(GLshort s)) SDL_GL_GetProcAddress( "glTexCoord1s");
		DYN_glTexCoord1sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glTexCoord1sv");
		DYN_glTexCoord2d = (void(*)(GLdouble s, GLdouble t)) SDL_GL_GetProcAddress( "glTexCoord2d");
		DYN_glTexCoord2dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glTexCoord2dv");
		DYN_glTexCoord2f = (void(*)(GLfloat s, GLfloat t)) SDL_GL_GetProcAddress( "glTexCoord2f");
		DYN_glTexCoord2fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glTexCoord2fv");
		DYN_glTexCoord2hNV = (void(*)(GLhalf s, GLhalf t)) SDL_GL_GetProcAddress( "glTexCoord2hNV");
		DYN_glTexCoord2hvNV = (void(*)(const GLhalf *v)) SDL_GL_GetProcAddress( "glTexCoord2hvNV");
		DYN_glTexCoord2i = (void(*)(GLint s, GLint t)) SDL_GL_GetProcAddress( "glTexCoord2i");
		DYN_glTexCoord2iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glTexCoord2iv");
		DYN_glTexCoord2s = (void(*)(GLshort s, GLshort t)) SDL_GL_GetProcAddress( "glTexCoord2s");
		DYN_glTexCoord2sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glTexCoord2sv");
		DYN_glTexCoord3d = (void(*)(GLdouble s, GLdouble t, GLdouble r)) SDL_GL_GetProcAddress( "glTexCoord3d");
		DYN_glTexCoord3dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glTexCoord3dv");
		DYN_glTexCoord3f = (void(*)(GLfloat s, GLfloat t, GLfloat r)) SDL_GL_GetProcAddress( "glTexCoord3f");
		DYN_glTexCoord3fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glTexCoord3fv");
		DYN_glTexCoord3hNV = (void(*)(GLhalf s, GLhalf t, GLhalf r)) SDL_GL_GetProcAddress( "glTexCoord3hNV");
		DYN_glTexCoord3hvNV = (void(*)(const GLhalf *v)) SDL_GL_GetProcAddress( "glTexCoord3hvNV");
		DYN_glTexCoord3i = (void(*)(GLint s, GLint t, GLint r)) SDL_GL_GetProcAddress( "glTexCoord3i");
		DYN_glTexCoord3iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glTexCoord3iv");
		DYN_glTexCoord3s = (void(*)(GLshort s, GLshort t, GLshort r)) SDL_GL_GetProcAddress( "glTexCoord3s");
		DYN_glTexCoord3sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glTexCoord3sv");
		DYN_glTexCoord4d = (void(*)(GLdouble s, GLdouble t, GLdouble r, GLdouble q)) SDL_GL_GetProcAddress( "glTexCoord4d");
		DYN_glTexCoord4dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glTexCoord4dv");
		DYN_glTexCoord4f = (void(*)(GLfloat s, GLfloat t, GLfloat r, GLfloat q)) SDL_GL_GetProcAddress( "glTexCoord4f");
		DYN_glTexCoord4fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glTexCoord4fv");
		DYN_glTexCoord4hNV = (void(*)(GLhalf s, GLhalf t, GLhalf r, GLhalf q)) SDL_GL_GetProcAddress( "glTexCoord4hNV");
		DYN_glTexCoord4hvNV = (void(*)(const GLhalf *v)) SDL_GL_GetProcAddress( "glTexCoord4hvNV");
		DYN_glTexCoord4i = (void(*)(GLint s, GLint t, GLint r, GLint q)) SDL_GL_GetProcAddress( "glTexCoord4i");
		DYN_glTexCoord4iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glTexCoord4iv");
		DYN_glTexCoord4s = (void(*)(GLshort s, GLshort t, GLshort r, GLshort q)) SDL_GL_GetProcAddress( "glTexCoord4s");
		DYN_glTexCoord4sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glTexCoord4sv");
		DYN_glTexCoordPointer = (void(*)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glTexCoordPointer");
		DYN_glTexCoordPointerEXT = (void(*)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glTexCoordPointerEXT");
		DYN_glTexEnvf = (void(*)(GLenum target, GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glTexEnvf");
		DYN_glTexEnvfv = (void(*)(GLenum target, GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glTexEnvfv");
		DYN_glTexEnvi = (void(*)(GLenum target, GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glTexEnvi");
		DYN_glTexEnviv = (void(*)(GLenum target, GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glTexEnviv");
		DYN_glTexGend = (void(*)(GLenum coord, GLenum pname, GLdouble param)) SDL_GL_GetProcAddress( "glTexGend");
		DYN_glTexGendv = (void(*)(GLenum coord, GLenum pname, const GLdouble *params)) SDL_GL_GetProcAddress( "glTexGendv");
		DYN_glTexGenf = (void(*)(GLenum coord, GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glTexGenf");
		DYN_glTexGenfv = (void(*)(GLenum coord, GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glTexGenfv");
		DYN_glTexGeni = (void(*)(GLenum coord, GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glTexGeni");
		DYN_glTexGeniv = (void(*)(GLenum coord, GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glTexGeniv");
		DYN_glTexImage1D = (void(*)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) SDL_GL_GetProcAddress( "glTexImage1D");
		DYN_glTexImage2D = (void(*)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) SDL_GL_GetProcAddress( "glTexImage2D");
		DYN_glTexImage3D = (void(*)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) SDL_GL_GetProcAddress( "glTexImage3D");
		DYN_glTexImage3DEXT = (void(*)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)) SDL_GL_GetProcAddress( "glTexImage3DEXT");
		DYN_glTexParameterf = (void(*)(GLenum target, GLenum pname, GLfloat param)) SDL_GL_GetProcAddress( "glTexParameterf");
		DYN_glTexParameterfv = (void(*)(GLenum target, GLenum pname, const GLfloat *params)) SDL_GL_GetProcAddress( "glTexParameterfv");
		DYN_glTexParameteri = (void(*)(GLenum target, GLenum pname, GLint param)) SDL_GL_GetProcAddress( "glTexParameteri");
		DYN_glTexParameteriv = (void(*)(GLenum target, GLenum pname, const GLint *params)) SDL_GL_GetProcAddress( "glTexParameteriv");
		DYN_glTexSubImage1D = (void(*)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)) SDL_GL_GetProcAddress( "glTexSubImage1D");
		DYN_glTexSubImage2D = (void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)) SDL_GL_GetProcAddress( "glTexSubImage2D");
		DYN_glTexSubImage3D = (void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)) SDL_GL_GetProcAddress( "glTexSubImage3D");
		DYN_glTexSubImage3DEXT = (void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)) SDL_GL_GetProcAddress( "glTexSubImage3DEXT");
		DYN_glTextureColorMaskSGIS = (void(*)(GLboolean r, GLboolean g, GLboolean b, GLboolean a)) SDL_GL_GetProcAddress( "glTextureColorMaskSGIS");
		DYN_glTrackMatrixNV = (void(*)(GLenum target, GLuint address, GLenum matrix, GLenum transform)) SDL_GL_GetProcAddress( "glTrackMatrixNV");
		DYN_glTranslated = (void(*)(GLdouble x, GLdouble y, GLdouble z)) SDL_GL_GetProcAddress( "glTranslated");
		DYN_glTranslatef = (void(*)(GLfloat x, GLfloat y, GLfloat z)) SDL_GL_GetProcAddress( "glTranslatef");
		DYN_glUnlockArraysEXT = (void(*)(void)) SDL_GL_GetProcAddress( "glUnlockArraysEXT");
		DYN_glUnmapBufferARB = (GLboolean(*)(GLenum target)) SDL_GL_GetProcAddress( "glUnmapBufferARB");
		DYN_glValidBackBufferHintAutodesk = (GLboolean(*)(GLint x, GLint y, GLsizei width, GLsizei height)) SDL_GL_GetProcAddress( "glValidBackBufferHintAutodesk");
		DYN_glVertex2d = (void(*)(GLdouble x, GLdouble y)) SDL_GL_GetProcAddress( "glVertex2d");
		DYN_glVertex2dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glVertex2dv");
		DYN_glVertex2f = (void(*)(GLfloat x, GLfloat y)) SDL_GL_GetProcAddress( "glVertex2f");
		DYN_glVertex2fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glVertex2fv");
		DYN_glVertex2hNV = (void(*)(GLhalf x, GLhalf y)) SDL_GL_GetProcAddress( "glVertex2hNV");
		DYN_glVertex2hvNV = (void(*)(const GLhalf *v)) SDL_GL_GetProcAddress( "glVertex2hvNV");
		DYN_glVertex2i = (void(*)(GLint x, GLint y)) SDL_GL_GetProcAddress( "glVertex2i");
		DYN_glVertex2iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glVertex2iv");
		DYN_glVertex2s = (void(*)(GLshort x, GLshort y)) SDL_GL_GetProcAddress( "glVertex2s");
		DYN_glVertex2sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glVertex2sv");
		DYN_glVertex3d = (void(*)(GLdouble x, GLdouble y, GLdouble z)) SDL_GL_GetProcAddress( "glVertex3d");
		DYN_glVertex3dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glVertex3dv");
		DYN_glVertex3f = (void(*)(GLfloat x, GLfloat y, GLfloat z)) SDL_GL_GetProcAddress( "glVertex3f");
		DYN_glVertex3fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glVertex3fv");
		DYN_glVertex3hNV = (void(*)(GLhalf x, GLhalf y, GLhalf z)) SDL_GL_GetProcAddress( "glVertex3hNV");
		DYN_glVertex3hvNV = (void(*)(const GLhalf *v)) SDL_GL_GetProcAddress( "glVertex3hvNV");
		DYN_glVertex3i = (void(*)(GLint x, GLint y, GLint z)) SDL_GL_GetProcAddress( "glVertex3i");
		DYN_glVertex3iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glVertex3iv");
		DYN_glVertex3s = (void(*)(GLshort x, GLshort y, GLshort z)) SDL_GL_GetProcAddress( "glVertex3s");
		DYN_glVertex3sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glVertex3sv");
		DYN_glVertex4d = (void(*)(GLdouble x, GLdouble y, GLdouble z, GLdouble w)) SDL_GL_GetProcAddress( "glVertex4d");
		DYN_glVertex4dv = (void(*)(const GLdouble *v)) SDL_GL_GetProcAddress( "glVertex4dv");
		DYN_glVertex4f = (void(*)(GLfloat x, GLfloat y, GLfloat z, GLfloat w)) SDL_GL_GetProcAddress( "glVertex4f");
		DYN_glVertex4fv = (void(*)(const GLfloat *v)) SDL_GL_GetProcAddress( "glVertex4fv");
		DYN_glVertex4hNV = (void(*)(GLhalf x, GLhalf y, GLhalf z, GLhalf w)) SDL_GL_GetProcAddress( "glVertex4hNV");
		DYN_glVertex4hvNV = (void(*)(const GLhalf *v)) SDL_GL_GetProcAddress( "glVertex4hvNV");
		DYN_glVertex4i = (void(*)(GLint x, GLint y, GLint z, GLint w)) SDL_GL_GetProcAddress( "glVertex4i");
		DYN_glVertex4iv = (void(*)(const GLint *v)) SDL_GL_GetProcAddress( "glVertex4iv");
		DYN_glVertex4s = (void(*)(GLshort x, GLshort y, GLshort z, GLshort w)) SDL_GL_GetProcAddress( "glVertex4s");
		DYN_glVertex4sv = (void(*)(const GLshort *v)) SDL_GL_GetProcAddress( "glVertex4sv");
		DYN_glVertexArrayRangeNV = (void(*)(GLsizei size, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glVertexArrayRangeNV");
		DYN_glVertexAttrib1dARB = (void(*)(GLuint index, GLdouble x)) SDL_GL_GetProcAddress( "glVertexAttrib1dARB");
		DYN_glVertexAttrib1dNV = (void(*)(GLuint index, GLdouble x)) SDL_GL_GetProcAddress( "glVertexAttrib1dNV");
		DYN_glVertexAttrib1dvARB = (void(*)(GLuint index, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttrib1dvARB");
		DYN_glVertexAttrib1dvNV = (void(*)(GLuint index, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttrib1dvNV");
		DYN_glVertexAttrib1fARB = (void(*)(GLuint index, GLfloat x)) SDL_GL_GetProcAddress( "glVertexAttrib1fARB");
		DYN_glVertexAttrib1fNV = (void(*)(GLuint index, GLfloat x)) SDL_GL_GetProcAddress( "glVertexAttrib1fNV");
		DYN_glVertexAttrib1fvARB = (void(*)(GLuint index, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttrib1fvARB");
		DYN_glVertexAttrib1fvNV = (void(*)(GLuint index, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttrib1fvNV");
		DYN_glVertexAttrib1hNV = (void(*)(GLuint index, GLhalf x)) SDL_GL_GetProcAddress( "glVertexAttrib1hNV");
		DYN_glVertexAttrib1hvNV = (void(*)(GLuint index, const GLhalf *v)) SDL_GL_GetProcAddress( "glVertexAttrib1hvNV");
		DYN_glVertexAttrib1sARB = (void(*)(GLuint index, GLshort x)) SDL_GL_GetProcAddress( "glVertexAttrib1sARB");
		DYN_glVertexAttrib1sNV = (void(*)(GLuint index, GLshort x)) SDL_GL_GetProcAddress( "glVertexAttrib1sNV");
		DYN_glVertexAttrib1svARB = (void(*)(GLuint index, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttrib1svARB");
		DYN_glVertexAttrib1svNV = (void(*)(GLuint index, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttrib1svNV");
		DYN_glVertexAttrib2dARB = (void(*)(GLuint index, GLdouble x, GLdouble y)) SDL_GL_GetProcAddress( "glVertexAttrib2dARB");
		DYN_glVertexAttrib2dNV = (void(*)(GLuint index, GLdouble x, GLdouble y)) SDL_GL_GetProcAddress( "glVertexAttrib2dNV");
		DYN_glVertexAttrib2dvARB = (void(*)(GLuint index, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttrib2dvARB");
		DYN_glVertexAttrib2dvNV = (void(*)(GLuint index, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttrib2dvNV");
		DYN_glVertexAttrib2fARB = (void(*)(GLuint index, GLfloat x, GLfloat y)) SDL_GL_GetProcAddress( "glVertexAttrib2fARB");
		DYN_glVertexAttrib2fNV = (void(*)(GLuint index, GLfloat x, GLfloat y)) SDL_GL_GetProcAddress( "glVertexAttrib2fNV");
		DYN_glVertexAttrib2fvARB = (void(*)(GLuint index, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttrib2fvARB");
		DYN_glVertexAttrib2fvNV = (void(*)(GLuint index, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttrib2fvNV");
		DYN_glVertexAttrib2hNV = (void(*)(GLuint index, GLhalf x, GLhalf y)) SDL_GL_GetProcAddress( "glVertexAttrib2hNV");
		DYN_glVertexAttrib2hvNV = (void(*)(GLuint index, const GLhalf *v)) SDL_GL_GetProcAddress( "glVertexAttrib2hvNV");
		DYN_glVertexAttrib2sARB = (void(*)(GLuint index, GLshort x, GLshort y)) SDL_GL_GetProcAddress( "glVertexAttrib2sARB");
		DYN_glVertexAttrib2sNV = (void(*)(GLuint index, GLshort x, GLshort y)) SDL_GL_GetProcAddress( "glVertexAttrib2sNV");
		DYN_glVertexAttrib2svARB = (void(*)(GLuint index, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttrib2svARB");
		DYN_glVertexAttrib2svNV = (void(*)(GLuint index, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttrib2svNV");
		DYN_glVertexAttrib3dARB = (void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z)) SDL_GL_GetProcAddress( "glVertexAttrib3dARB");
		DYN_glVertexAttrib3dNV = (void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z)) SDL_GL_GetProcAddress( "glVertexAttrib3dNV");
		DYN_glVertexAttrib3dvARB = (void(*)(GLuint index, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttrib3dvARB");
		DYN_glVertexAttrib3dvNV = (void(*)(GLuint index, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttrib3dvNV");
		DYN_glVertexAttrib3fARB = (void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat z)) SDL_GL_GetProcAddress( "glVertexAttrib3fARB");
		DYN_glVertexAttrib3fNV = (void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat z)) SDL_GL_GetProcAddress( "glVertexAttrib3fNV");
		DYN_glVertexAttrib3fvARB = (void(*)(GLuint index, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttrib3fvARB");
		DYN_glVertexAttrib3fvNV = (void(*)(GLuint index, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttrib3fvNV");
		DYN_glVertexAttrib3hNV = (void(*)(GLuint index, GLhalf x, GLhalf y, GLhalf z)) SDL_GL_GetProcAddress( "glVertexAttrib3hNV");
		DYN_glVertexAttrib3hvNV = (void(*)(GLuint index, const GLhalf *v)) SDL_GL_GetProcAddress( "glVertexAttrib3hvNV");
		DYN_glVertexAttrib3sARB = (void(*)(GLuint index, GLshort x, GLshort y, GLshort z)) SDL_GL_GetProcAddress( "glVertexAttrib3sARB");
		DYN_glVertexAttrib3sNV = (void(*)(GLuint index, GLshort x, GLshort y, GLshort z)) SDL_GL_GetProcAddress( "glVertexAttrib3sNV");
		DYN_glVertexAttrib3svARB = (void(*)(GLuint index, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttrib3svARB");
		DYN_glVertexAttrib3svNV = (void(*)(GLuint index, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttrib3svNV");
		DYN_glVertexAttrib4NbvARB = (void(*)(GLuint index, const GLbyte *v)) SDL_GL_GetProcAddress( "glVertexAttrib4NbvARB");
		DYN_glVertexAttrib4NivARB = (void(*)(GLuint index, const GLint *v)) SDL_GL_GetProcAddress( "glVertexAttrib4NivARB");
		DYN_glVertexAttrib4NsvARB = (void(*)(GLuint index, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttrib4NsvARB");
		DYN_glVertexAttrib4NubARB = (void(*)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)) SDL_GL_GetProcAddress( "glVertexAttrib4NubARB");
		DYN_glVertexAttrib4NubvARB = (void(*)(GLuint index, const GLubyte *v)) SDL_GL_GetProcAddress( "glVertexAttrib4NubvARB");
		DYN_glVertexAttrib4NuivARB = (void(*)(GLuint index, const GLuint *v)) SDL_GL_GetProcAddress( "glVertexAttrib4NuivARB");
		DYN_glVertexAttrib4NusvARB = (void(*)(GLuint index, const GLushort *v)) SDL_GL_GetProcAddress( "glVertexAttrib4NusvARB");
		DYN_glVertexAttrib4bvARB = (void(*)(GLuint index, const GLbyte *v)) SDL_GL_GetProcAddress( "glVertexAttrib4bvARB");
		DYN_glVertexAttrib4dARB = (void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) SDL_GL_GetProcAddress( "glVertexAttrib4dARB");
		DYN_glVertexAttrib4dNV = (void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)) SDL_GL_GetProcAddress( "glVertexAttrib4dNV");
		DYN_glVertexAttrib4dvARB = (void(*)(GLuint index, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttrib4dvARB");
		DYN_glVertexAttrib4dvNV = (void(*)(GLuint index, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttrib4dvNV");
		DYN_glVertexAttrib4fARB = (void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) SDL_GL_GetProcAddress( "glVertexAttrib4fARB");
		DYN_glVertexAttrib4fNV = (void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)) SDL_GL_GetProcAddress( "glVertexAttrib4fNV");
		DYN_glVertexAttrib4fvARB = (void(*)(GLuint index, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttrib4fvARB");
		DYN_glVertexAttrib4fvNV = (void(*)(GLuint index, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttrib4fvNV");
		DYN_glVertexAttrib4hNV = (void(*)(GLuint index, GLhalf x, GLhalf y, GLhalf z, GLhalf w)) SDL_GL_GetProcAddress( "glVertexAttrib4hNV");
		DYN_glVertexAttrib4hvNV = (void(*)(GLuint index, const GLhalf *v)) SDL_GL_GetProcAddress( "glVertexAttrib4hvNV");
		DYN_glVertexAttrib4ivARB = (void(*)(GLuint index, const GLint *v)) SDL_GL_GetProcAddress( "glVertexAttrib4ivARB");
		DYN_glVertexAttrib4sARB = (void(*)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)) SDL_GL_GetProcAddress( "glVertexAttrib4sARB");
		DYN_glVertexAttrib4sNV = (void(*)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)) SDL_GL_GetProcAddress( "glVertexAttrib4sNV");
		DYN_glVertexAttrib4svARB = (void(*)(GLuint index, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttrib4svARB");
		DYN_glVertexAttrib4svNV = (void(*)(GLuint index, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttrib4svNV");
		DYN_glVertexAttrib4ubNV = (void(*)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)) SDL_GL_GetProcAddress( "glVertexAttrib4ubNV");
		DYN_glVertexAttrib4ubvARB = (void(*)(GLuint index, const GLubyte *v)) SDL_GL_GetProcAddress( "glVertexAttrib4ubvARB");
		DYN_glVertexAttrib4ubvNV = (void(*)(GLuint index, const GLubyte *v)) SDL_GL_GetProcAddress( "glVertexAttrib4ubvNV");
		DYN_glVertexAttrib4uivARB = (void(*)(GLuint index, const GLuint *v)) SDL_GL_GetProcAddress( "glVertexAttrib4uivARB");
		DYN_glVertexAttrib4usvARB = (void(*)(GLuint index, const GLushort *v)) SDL_GL_GetProcAddress( "glVertexAttrib4usvARB");
		DYN_glVertexAttribPointerARB = (void(*)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glVertexAttribPointerARB");
		DYN_glVertexAttribPointerNV = (void(*)(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glVertexAttribPointerNV");
		DYN_glVertexAttribs1dvNV = (void(*)(GLuint index, GLsizei count, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttribs1dvNV");
		DYN_glVertexAttribs1fvNV = (void(*)(GLuint index, GLsizei count, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttribs1fvNV");
		DYN_glVertexAttribs1hvNV = (void(*)(GLuint index, GLsizei count, const GLhalf *v)) SDL_GL_GetProcAddress( "glVertexAttribs1hvNV");
		DYN_glVertexAttribs1svNV = (void(*)(GLuint index, GLsizei count, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttribs1svNV");
		DYN_glVertexAttribs2dvNV = (void(*)(GLuint index, GLsizei count, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttribs2dvNV");
		DYN_glVertexAttribs2fvNV = (void(*)(GLuint index, GLsizei count, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttribs2fvNV");
		DYN_glVertexAttribs2hvNV = (void(*)(GLuint index, GLsizei count, const GLhalf *v)) SDL_GL_GetProcAddress( "glVertexAttribs2hvNV");
		DYN_glVertexAttribs2svNV = (void(*)(GLuint index, GLsizei count, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttribs2svNV");
		DYN_glVertexAttribs3dvNV = (void(*)(GLuint index, GLsizei count, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttribs3dvNV");
		DYN_glVertexAttribs3fvNV = (void(*)(GLuint index, GLsizei count, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttribs3fvNV");
		DYN_glVertexAttribs3hvNV = (void(*)(GLuint index, GLsizei count, const GLhalf *v)) SDL_GL_GetProcAddress( "glVertexAttribs3hvNV");
		DYN_glVertexAttribs3svNV = (void(*)(GLuint index, GLsizei count, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttribs3svNV");
		DYN_glVertexAttribs4dvNV = (void(*)(GLuint index, GLsizei count, const GLdouble *v)) SDL_GL_GetProcAddress( "glVertexAttribs4dvNV");
		DYN_glVertexAttribs4fvNV = (void(*)(GLuint index, GLsizei count, const GLfloat *v)) SDL_GL_GetProcAddress( "glVertexAttribs4fvNV");
		DYN_glVertexAttribs4hvNV = (void(*)(GLuint index, GLsizei count, const GLhalf *v)) SDL_GL_GetProcAddress( "glVertexAttribs4hvNV");
		DYN_glVertexAttribs4svNV = (void(*)(GLuint index, GLsizei count, const GLshort *v)) SDL_GL_GetProcAddress( "glVertexAttribs4svNV");
		DYN_glVertexAttribs4ubvNV = (void(*)(GLuint index, GLsizei count, const GLubyte *v)) SDL_GL_GetProcAddress( "glVertexAttribs4ubvNV");
		DYN_glVertexPointer = (void(*)(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glVertexPointer");
		DYN_glVertexPointerEXT = (void(*)(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glVertexPointerEXT");
		DYN_glVertexWeightPointerEXT = (void(*)(GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer)) SDL_GL_GetProcAddress( "glVertexWeightPointerEXT");
		DYN_glVertexWeightfEXT = (void(*)(GLfloat weight)) SDL_GL_GetProcAddress( "glVertexWeightfEXT");
		DYN_glVertexWeightfvEXT = (void(*)(const GLfloat *weight)) SDL_GL_GetProcAddress( "glVertexWeightfvEXT");
		DYN_glVertexWeighthNV = (void(*)(GLhalf weight)) SDL_GL_GetProcAddress( "glVertexWeighthNV");
		DYN_glVertexWeighthvNV = (void(*)(const GLhalf *weight)) SDL_GL_GetProcAddress( "glVertexWeighthvNV");
		DYN_glViewport = (void(*)(GLint x, GLint y, GLsizei width, GLsizei height)) SDL_GL_GetProcAddress( "glViewport");
		DYN_glWindowBackBufferHintAutodesk = (void(*)(void)) SDL_GL_GetProcAddress( "glWindowBackBufferHintAutodesk");
		DYN_glWindowPos2d = (void(*)(GLdouble x, GLdouble y)) SDL_GL_GetProcAddress( "glWindowPos2d");
		DYN_glWindowPos2dARB = (void(*)(GLdouble x, GLdouble y)) SDL_GL_GetProcAddress( "glWindowPos2dARB");
		DYN_glWindowPos2dv = (void(*)(const GLdouble *p)) SDL_GL_GetProcAddress( "glWindowPos2dv");
		DYN_glWindowPos2dvARB = (void(*)(const GLdouble *p)) SDL_GL_GetProcAddress( "glWindowPos2dvARB");
		DYN_glWindowPos2f = (void(*)(GLfloat x, GLfloat y)) SDL_GL_GetProcAddress( "glWindowPos2f");
		DYN_glWindowPos2fARB = (void(*)(GLfloat x, GLfloat y)) SDL_GL_GetProcAddress( "glWindowPos2fARB");
		DYN_glWindowPos2fv = (void(*)(const GLfloat *p)) SDL_GL_GetProcAddress( "glWindowPos2fv");
		DYN_glWindowPos2fvARB = (void(*)(const GLfloat *p)) SDL_GL_GetProcAddress( "glWindowPos2fvARB");
		DYN_glWindowPos2i = (void(*)(GLint x, GLint y)) SDL_GL_GetProcAddress( "glWindowPos2i");
		DYN_glWindowPos2iARB = (void(*)(GLint x, GLint y)) SDL_GL_GetProcAddress( "glWindowPos2iARB");
		DYN_glWindowPos2iv = (void(*)(const GLint *p)) SDL_GL_GetProcAddress( "glWindowPos2iv");
		DYN_glWindowPos2ivARB = (void(*)(const GLint *p)) SDL_GL_GetProcAddress( "glWindowPos2ivARB");
		DYN_glWindowPos2s = (void(*)(GLshort x, GLshort y)) SDL_GL_GetProcAddress( "glWindowPos2s");
		DYN_glWindowPos2sARB = (void(*)(GLshort x, GLshort y)) SDL_GL_GetProcAddress( "glWindowPos2sARB");
		DYN_glWindowPos2sv = (void(*)(const GLshort *p)) SDL_GL_GetProcAddress( "glWindowPos2sv");
		DYN_glWindowPos2svARB = (void(*)(const GLshort *p)) SDL_GL_GetProcAddress( "glWindowPos2svARB");
		DYN_glWindowPos3d = (void(*)(GLdouble x, GLdouble y, GLdouble z)) SDL_GL_GetProcAddress( "glWindowPos3d");
		DYN_glWindowPos3dARB = (void(*)(GLdouble x, GLdouble y, GLdouble z)) SDL_GL_GetProcAddress( "glWindowPos3dARB");
		DYN_glWindowPos3dv = (void(*)(const GLdouble *p)) SDL_GL_GetProcAddress( "glWindowPos3dv");
		DYN_glWindowPos3dvARB = (void(*)(const GLdouble *p)) SDL_GL_GetProcAddress( "glWindowPos3dvARB");
		DYN_glWindowPos3f = (void(*)(GLfloat x, GLfloat y, GLfloat z)) SDL_GL_GetProcAddress( "glWindowPos3f");
		DYN_glWindowPos3fARB = (void(*)(GLfloat x, GLfloat y, GLfloat z)) SDL_GL_GetProcAddress( "glWindowPos3fARB");
		DYN_glWindowPos3fv = (void(*)(const GLfloat *p)) SDL_GL_GetProcAddress( "glWindowPos3fv");
		DYN_glWindowPos3fvARB = (void(*)(const GLfloat *p)) SDL_GL_GetProcAddress( "glWindowPos3fvARB");
		DYN_glWindowPos3i = (void(*)(GLint x, GLint y, GLint z)) SDL_GL_GetProcAddress( "glWindowPos3i");
		DYN_glWindowPos3iARB = (void(*)(GLint x, GLint y, GLint z)) SDL_GL_GetProcAddress( "glWindowPos3iARB");
		DYN_glWindowPos3iv = (void(*)(const GLint *p)) SDL_GL_GetProcAddress( "glWindowPos3iv");
		DYN_glWindowPos3ivARB = (void(*)(const GLint *p)) SDL_GL_GetProcAddress( "glWindowPos3ivARB");
		DYN_glWindowPos3s = (void(*)(GLshort x, GLshort y, GLshort z)) SDL_GL_GetProcAddress( "glWindowPos3s");
		DYN_glWindowPos3sARB = (void(*)(GLshort x, GLshort y, GLshort z)) SDL_GL_GetProcAddress( "glWindowPos3sARB");
		DYN_glWindowPos3sv = (void(*)(const GLshort *p)) SDL_GL_GetProcAddress( "glWindowPos3sv");
		DYN_glWindowPos3svARB = (void(*)(const GLshort *p)) SDL_GL_GetProcAddress( "glWindowPos3svARB");

	return true;
	}
#ifdef CONFIG_GL_NAMESPACE
}
#endif
#endif //  DYNAMIC_GL
